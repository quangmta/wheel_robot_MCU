
wheel_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050fc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c0  080053c0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080053c0  080053c0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053c0  080053c0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080053c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000005c  08005424  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000390  08005424  00020390  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdc4  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd1  00000000  00000000  0002ce8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  0002ee60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f9  00000000  00000000  0002fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f79  00000000  00000000  00030519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edbb  00000000  00000000  00048492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a835  00000000  00000000  0005724d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c30  00000000  00000000  000e1a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e56b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	080051f4 	.word	0x080051f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	080051f4 	.word	0x080051f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2iz>:
 800072c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d215      	bcs.n	8000762 <__aeabi_d2iz+0x36>
 8000736:	d511      	bpl.n	800075c <__aeabi_d2iz+0x30>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d912      	bls.n	8000768 <__aeabi_d2iz+0x3c>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000752:	fa23 f002 	lsr.w	r0, r3, r2
 8000756:	bf18      	it	ne
 8000758:	4240      	negne	r0, r0
 800075a:	4770      	bx	lr
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	4770      	bx	lr
 8000762:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000766:	d105      	bne.n	8000774 <__aeabi_d2iz+0x48>
 8000768:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800076c:	bf08      	it	eq
 800076e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <__aeabi_frsub>:
 800077c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000780:	e002      	b.n	8000788 <__addsf3>
 8000782:	bf00      	nop

08000784 <__aeabi_fsub>:
 8000784:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000788 <__addsf3>:
 8000788:	0042      	lsls	r2, r0, #1
 800078a:	bf1f      	itttt	ne
 800078c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000790:	ea92 0f03 	teqne	r2, r3
 8000794:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000798:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800079c:	d06a      	beq.n	8000874 <__addsf3+0xec>
 800079e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007a6:	bfc1      	itttt	gt
 80007a8:	18d2      	addgt	r2, r2, r3
 80007aa:	4041      	eorgt	r1, r0
 80007ac:	4048      	eorgt	r0, r1
 80007ae:	4041      	eorgt	r1, r0
 80007b0:	bfb8      	it	lt
 80007b2:	425b      	neglt	r3, r3
 80007b4:	2b19      	cmp	r3, #25
 80007b6:	bf88      	it	hi
 80007b8:	4770      	bxhi	lr
 80007ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007d6:	bf18      	it	ne
 80007d8:	4249      	negne	r1, r1
 80007da:	ea92 0f03 	teq	r2, r3
 80007de:	d03f      	beq.n	8000860 <__addsf3+0xd8>
 80007e0:	f1a2 0201 	sub.w	r2, r2, #1
 80007e4:	fa41 fc03 	asr.w	ip, r1, r3
 80007e8:	eb10 000c 	adds.w	r0, r0, ip
 80007ec:	f1c3 0320 	rsb	r3, r3, #32
 80007f0:	fa01 f103 	lsl.w	r1, r1, r3
 80007f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007f8:	d502      	bpl.n	8000800 <__addsf3+0x78>
 80007fa:	4249      	negs	r1, r1
 80007fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000800:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000804:	d313      	bcc.n	800082e <__addsf3+0xa6>
 8000806:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800080a:	d306      	bcc.n	800081a <__addsf3+0x92>
 800080c:	0840      	lsrs	r0, r0, #1
 800080e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000812:	f102 0201 	add.w	r2, r2, #1
 8000816:	2afe      	cmp	r2, #254	; 0xfe
 8000818:	d251      	bcs.n	80008be <__addsf3+0x136>
 800081a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800081e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000822:	bf08      	it	eq
 8000824:	f020 0001 	biceq.w	r0, r0, #1
 8000828:	ea40 0003 	orr.w	r0, r0, r3
 800082c:	4770      	bx	lr
 800082e:	0049      	lsls	r1, r1, #1
 8000830:	eb40 0000 	adc.w	r0, r0, r0
 8000834:	3a01      	subs	r2, #1
 8000836:	bf28      	it	cs
 8000838:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800083c:	d2ed      	bcs.n	800081a <__addsf3+0x92>
 800083e:	fab0 fc80 	clz	ip, r0
 8000842:	f1ac 0c08 	sub.w	ip, ip, #8
 8000846:	ebb2 020c 	subs.w	r2, r2, ip
 800084a:	fa00 f00c 	lsl.w	r0, r0, ip
 800084e:	bfaa      	itet	ge
 8000850:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000854:	4252      	neglt	r2, r2
 8000856:	4318      	orrge	r0, r3
 8000858:	bfbc      	itt	lt
 800085a:	40d0      	lsrlt	r0, r2
 800085c:	4318      	orrlt	r0, r3
 800085e:	4770      	bx	lr
 8000860:	f092 0f00 	teq	r2, #0
 8000864:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000868:	bf06      	itte	eq
 800086a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800086e:	3201      	addeq	r2, #1
 8000870:	3b01      	subne	r3, #1
 8000872:	e7b5      	b.n	80007e0 <__addsf3+0x58>
 8000874:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000878:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800087c:	bf18      	it	ne
 800087e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000882:	d021      	beq.n	80008c8 <__addsf3+0x140>
 8000884:	ea92 0f03 	teq	r2, r3
 8000888:	d004      	beq.n	8000894 <__addsf3+0x10c>
 800088a:	f092 0f00 	teq	r2, #0
 800088e:	bf08      	it	eq
 8000890:	4608      	moveq	r0, r1
 8000892:	4770      	bx	lr
 8000894:	ea90 0f01 	teq	r0, r1
 8000898:	bf1c      	itt	ne
 800089a:	2000      	movne	r0, #0
 800089c:	4770      	bxne	lr
 800089e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008a2:	d104      	bne.n	80008ae <__addsf3+0x126>
 80008a4:	0040      	lsls	r0, r0, #1
 80008a6:	bf28      	it	cs
 80008a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ac:	4770      	bx	lr
 80008ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008b2:	bf3c      	itt	cc
 80008b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008b8:	4770      	bxcc	lr
 80008ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008c6:	4770      	bx	lr
 80008c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008cc:	bf16      	itet	ne
 80008ce:	4608      	movne	r0, r1
 80008d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008d4:	4601      	movne	r1, r0
 80008d6:	0242      	lsls	r2, r0, #9
 80008d8:	bf06      	itte	eq
 80008da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008de:	ea90 0f01 	teqeq	r0, r1
 80008e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008e6:	4770      	bx	lr

080008e8 <__aeabi_ui2f>:
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	e004      	b.n	80008f8 <__aeabi_i2f+0x8>
 80008ee:	bf00      	nop

080008f0 <__aeabi_i2f>:
 80008f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008f4:	bf48      	it	mi
 80008f6:	4240      	negmi	r0, r0
 80008f8:	ea5f 0c00 	movs.w	ip, r0
 80008fc:	bf08      	it	eq
 80008fe:	4770      	bxeq	lr
 8000900:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000904:	4601      	mov	r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	e01c      	b.n	8000946 <__aeabi_l2f+0x2a>

0800090c <__aeabi_ul2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	e00a      	b.n	8000930 <__aeabi_l2f+0x14>
 800091a:	bf00      	nop

0800091c <__aeabi_l2f>:
 800091c:	ea50 0201 	orrs.w	r2, r0, r1
 8000920:	bf08      	it	eq
 8000922:	4770      	bxeq	lr
 8000924:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000928:	d502      	bpl.n	8000930 <__aeabi_l2f+0x14>
 800092a:	4240      	negs	r0, r0
 800092c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000930:	ea5f 0c01 	movs.w	ip, r1
 8000934:	bf02      	ittt	eq
 8000936:	4684      	moveq	ip, r0
 8000938:	4601      	moveq	r1, r0
 800093a:	2000      	moveq	r0, #0
 800093c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000940:	bf08      	it	eq
 8000942:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000946:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800094a:	fabc f28c 	clz	r2, ip
 800094e:	3a08      	subs	r2, #8
 8000950:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000954:	db10      	blt.n	8000978 <__aeabi_l2f+0x5c>
 8000956:	fa01 fc02 	lsl.w	ip, r1, r2
 800095a:	4463      	add	r3, ip
 800095c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000968:	fa20 f202 	lsr.w	r2, r0, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	f020 0001 	biceq.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	f102 0220 	add.w	r2, r2, #32
 800097c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000980:	f1c2 0220 	rsb	r2, r2, #32
 8000984:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000988:	fa21 f202 	lsr.w	r2, r1, r2
 800098c:	eb43 0002 	adc.w	r0, r3, r2
 8000990:	bf08      	it	eq
 8000992:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000996:	4770      	bx	lr

08000998 <__aeabi_f2iz>:
 8000998:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800099c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009a0:	d30f      	bcc.n	80009c2 <__aeabi_f2iz+0x2a>
 80009a2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009a6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_f2iz+0x30>
 80009ac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009b8:	fa23 f002 	lsr.w	r0, r3, r2
 80009bc:	bf18      	it	ne
 80009be:	4240      	negne	r0, r0
 80009c0:	4770      	bx	lr
 80009c2:	f04f 0000 	mov.w	r0, #0
 80009c6:	4770      	bx	lr
 80009c8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009cc:	d101      	bne.n	80009d2 <__aeabi_f2iz+0x3a>
 80009ce:	0242      	lsls	r2, r0, #9
 80009d0:	d105      	bne.n	80009de <__aeabi_f2iz+0x46>
 80009d2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009d6:	bf08      	it	eq
 80009d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <initPID>:
#include "motor_driver.h"

extern uint8_t moving;
extern uint8_t flag_moving;
uint8_t count_flag_moving = 0;
void initPID(SetPointInfo *pointPID){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	pointPID->TargetTicksPerFrame = 0.0;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f04f 0200 	mov.w	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
	pointPID->Encoder = 0.0;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
	pointPID->PrevEnc = 0.0;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
	pointPID->output = 0;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
	pointPID->Input = 0;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
	pointPID->PrevInput = 0;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
	pointPID->ITerm = 0;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
	pointPID->speed = 0;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
	pointPID->Kp = KP;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	221a      	movs	r2, #26
 8000a22:	841a      	strh	r2, [r3, #32]
	pointPID->Ki = KI*PID_TIME/1000;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2203      	movs	r2, #3
 8000a28:	845a      	strh	r2, [r3, #34]	; 0x22
	pointPID->Kd = KD*1000/PID_TIME;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2221      	movs	r2, #33	; 0x21
 8000a2e:	849a      	strh	r2, [r3, #36]	; 0x24
	pointPID->Ko = KO;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2202      	movs	r2, #2
 8000a34:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <resetPID>:
void resetPID(SetPointInfo *pointPID) {
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	pointPID->TargetTicksPerFrame = 0.0;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f04f 0200 	mov.w	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
	pointPID->PrevEnc = pointPID->Encoder;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685a      	ldr	r2, [r3, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
	pointPID->output = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
	pointPID->Input = 0;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
	pointPID->PrevInput = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
	pointPID->ITerm = 0;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
	pointPID->speed = 0;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <doPID>:

/* PID routine to compute the next motor commands */
void doPID(SetPointInfo *pointPID) {
 8000a80:	b590      	push	{r4, r7, lr}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	int Perror = pointPID->TargetTicksPerFrame - pointPID->PrevInput;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681c      	ldr	r4, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff2d 	bl	80008f0 <__aeabi_i2f>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f7ff fe72 	bl	8000784 <__aeabi_fsub>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff78 	bl	8000998 <__aeabi_f2iz>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	60fb      	str	r3, [r7, #12]
	 * see http://brettbeauregard.com/blog/2011/04/improving-the-beginner%E2%80%99s-pid-derivative-kick/
	 * see http://brettbeauregard.com/blog/2011/04/improving-the-beginner%E2%80%99s-pid-tuning-changes/
	 */
	//output = (Kp * Perror + Kd * (Perror - p->PrevErr) + Ki * p->Ierror) / Ko;
	// p->PrevErr = Perror;
	pointPID->output = (pointPID->Kp * Perror + pointPID->ITerm
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	8c1b      	ldrh	r3, [r3, #32]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	fb03 f202 	mul.w	r2, r3, r2
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	441a      	add	r2, r3
			- pointPID->Kd * (pointPID->Input - pointPID->PrevInput))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6919      	ldr	r1, [r3, #16]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	1acb      	subs	r3, r1, r3
 8000ace:	fb00 f303 	mul.w	r3, r0, r3
 8000ad2:	1ad3      	subs	r3, r2, r3
			/ pointPID->Ko;
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8000ad8:	fb93 f2f2 	sdiv	r2, r3, r2
	pointPID->output = (pointPID->Kp * Perror + pointPID->ITerm
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	61da      	str	r2, [r3, #28]

	//output += pointPID->output;
	// Accumulate Integral error *or* Limit output.
	// Stop accumulating when output saturates
	if (pointPID->output >= MAX_PWM)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ae8:	db04      	blt.n	8000af4 <doPID+0x74>
		pointPID->output = MAX_PWM;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000af0:	61da      	str	r2, [r3, #28]
	else
		/*
		 * allow turning changes, see http://brettbeauregard.com/blog/2011/04/improving-the-beginner%E2%80%99s-pid-tuning-changes/
		 */
		pointPID->ITerm += pointPID->Ki * Perror;
}
 8000af2:	e013      	b.n	8000b1c <doPID+0x9c>
	else if (pointPID->output <= -MAX_PWM)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69db      	ldr	r3, [r3, #28]
 8000af8:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8000afc:	dc03      	bgt.n	8000b06 <doPID+0x86>
		pointPID->output = -MAX_PWM;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <doPID+0xa4>)
 8000b02:	61da      	str	r2, [r3, #28]
}
 8000b04:	e00a      	b.n	8000b1c <doPID+0x9c>
		pointPID->ITerm += pointPID->Ki * Perror;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	699a      	ldr	r2, [r3, #24]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000b0e:	4619      	mov	r1, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	fb01 f303 	mul.w	r3, r1, r3
 8000b16:	441a      	add	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	619a      	str	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	fffffc18 	.word	0xfffffc18

08000b28 <updateSpeed>:
void updateSpeed(SetPointInfo *pointPID) {
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	int input;

	//Perror = p->TargetTicksPerFrame - (p->Encoder - p->PrevEnc);
	input = pointPID->Encoder - pointPID->PrevEnc;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	60fb      	str	r3, [r7, #12]
	if ((pointPID->PrevEnc > 49152) && (pointPID->Encoder < 16384))
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000b44:	d909      	bls.n	8000b5a <updateSpeed+0x32>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b4e:	d204      	bcs.n	8000b5a <updateSpeed+0x32>
		input += 65536;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	e00d      	b.n	8000b76 <updateSpeed+0x4e>
	else if ((pointPID->PrevEnc < 16384) && (pointPID->Encoder > 49152))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b62:	d208      	bcs.n	8000b76 <updateSpeed+0x4e>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000b6c:	d903      	bls.n	8000b76 <updateSpeed+0x4e>
		input -= 65536;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000b74:	60fb      	str	r3, [r7, #12]
	//Low-Pass filter
	input = 0.854 * input + 0.0728 * pointPID->Input
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff fd6e 	bl	8000658 <__aeabi_i2d>
 8000b7c:	a32a      	add	r3, pc, #168	; (adr r3, 8000c28 <updateSpeed+0x100>)
 8000b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b82:	f7ff faed 	bl	8000160 <__aeabi_dmul>
 8000b86:	4602      	mov	r2, r0
 8000b88:	460b      	mov	r3, r1
 8000b8a:	4614      	mov	r4, r2
 8000b8c:	461d      	mov	r5, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fd60 	bl	8000658 <__aeabi_i2d>
 8000b98:	a325      	add	r3, pc, #148	; (adr r3, 8000c30 <updateSpeed+0x108>)
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	f7ff fadf 	bl	8000160 <__aeabi_dmul>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	4629      	mov	r1, r5
 8000baa:	f7ff fc09 	bl	80003c0 <__adddf3>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	4614      	mov	r4, r2
 8000bb4:	461d      	mov	r5, r3
			+ 0.0728 * pointPID->PrevInput;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fd4c 	bl	8000658 <__aeabi_i2d>
 8000bc0:	a31b      	add	r3, pc, #108	; (adr r3, 8000c30 <updateSpeed+0x108>)
 8000bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc6:	f7ff facb 	bl	8000160 <__aeabi_dmul>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4620      	mov	r0, r4
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	f7ff fbf5 	bl	80003c0 <__adddf3>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	460b      	mov	r3, r1
	input = 0.854 * input + 0.0728 * pointPID->Input
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f7ff fda5 	bl	800072c <__aeabi_d2iz>
 8000be2:	4603      	mov	r3, r0
 8000be4:	60fb      	str	r3, [r7, #12]

	pointPID->PrevEnc = pointPID->Encoder;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	609a      	str	r2, [r3, #8]
	pointPID->PrevInput = pointPID->Input;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	691a      	ldr	r2, [r3, #16]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	615a      	str	r2, [r3, #20]
	pointPID->Input = input;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
	pointPID->speed = input * 1000 / PID_TIME;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c02:	fb02 f303 	mul.w	r3, r2, r3
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <updateSpeed+0x110>)
 8000c08:	fb82 1203 	smull	r1, r2, r2, r3
 8000c0c:	441a      	add	r2, r3
 8000c0e:	1112      	asrs	r2, r2, #4
 8000c10:	17db      	asrs	r3, r3, #31
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60da      	str	r2, [r3, #12]

}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bdb0      	pop	{r4, r5, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	f3af 8000 	nop.w
 8000c28:	ced91687 	.word	0xced91687
 8000c2c:	3feb53f7 	.word	0x3feb53f7
 8000c30:	532617c2 	.word	0x532617c2
 8000c34:	3fb2a305 	.word	0x3fb2a305
 8000c38:	88888889 	.word	0x88888889

08000c3c <updatePID>:
/* Read the encoder values and call the PID routine */
void updatePID(SetPointInfo *leftPID, SetPointInfo *rightPID) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
	/* Read the encoders */
	updateSpeed(leftPID);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f7ff ff6e 	bl	8000b28 <updateSpeed>
	updateSpeed(rightPID);
 8000c4c:	6838      	ldr	r0, [r7, #0]
 8000c4e:	f7ff ff6b 	bl	8000b28 <updateSpeed>

	if (flag_moving){
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <updatePID+0xa4>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d01c      	beq.n	8000c94 <updatePID+0x58>
		count_flag_moving ++;
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <updatePID+0xa8>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <updatePID+0xa8>)
 8000c64:	701a      	strb	r2, [r3, #0]
		if (count_flag_moving == 15){
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <updatePID+0xa8>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b0f      	cmp	r3, #15
 8000c6c:	d112      	bne.n	8000c94 <updatePID+0x58>
			setMotorSpeeds(0, 0);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 fdc9 	bl	8001808 <setMotorSpeeds>
			resetPID(leftPID);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff fee2 	bl	8000a40 <resetPID>
			resetPID(rightPID);
 8000c7c:	6838      	ldr	r0, [r7, #0]
 8000c7e:	f7ff fedf 	bl	8000a40 <resetPID>
			moving = 0;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <updatePID+0xac>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
			count_flag_moving = 0;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <updatePID+0xa8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
			flag_moving = 0;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <updatePID+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
		}
	}

	/* If we're not moving there is nothing more to do */
	if (!moving) {
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <updatePID+0xac>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d10e      	bne.n	8000cba <updatePID+0x7e>
		 * Reset PIDs once, to prevent startup spikes,
		 * see http://brettbeauregard.com/blog/2011/04/improving-the-beginner%E2%80%99s-pid-initialization/
		 * PrevInput is considered a good proxy to detect
		 * whether reset has already happened
		 */
		if (leftPID->PrevInput != 0 || rightPID->PrevInput != 0) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d103      	bne.n	8000cac <updatePID+0x70>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d015      	beq.n	8000cd8 <updatePID+0x9c>
			resetPID(leftPID);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fec7 	bl	8000a40 <resetPID>
			resetPID(rightPID);
 8000cb2:	6838      	ldr	r0, [r7, #0]
 8000cb4:	f7ff fec4 	bl	8000a40 <resetPID>
		}
		return;
 8000cb8:	e00e      	b.n	8000cd8 <updatePID+0x9c>
	}
	/* Compute PID update for each motor */
	doPID(leftPID);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fee0 	bl	8000a80 <doPID>
	doPID(rightPID);
 8000cc0:	6838      	ldr	r0, [r7, #0]
 8000cc2:	f7ff fedd 	bl	8000a80 <doPID>

	/* Set the motor speeds accordingly */
	setMotorSpeeds(leftPID->output, rightPID->output);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69da      	ldr	r2, [r3, #28]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	f000 fd99 	bl	8001808 <setMotorSpeeds>
 8000cd6:	e000      	b.n	8000cda <updatePID+0x9e>
		return;
 8000cd8:	bf00      	nop
}
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000020f 	.word	0x2000020f
 8000ce4:	20000078 	.word	0x20000078
 8000ce8:	200001ec 	.word	0x200001ec

08000cec <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d105      	bne.n	8000d08 <HAL_TIM_IC_CaptureCallback+0x1c>
		leftPID.Encoder = __HAL_TIM_GET_COUNTER(htim);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000d04:	6053      	str	r3, [r2, #4]
	} else if (htim == &htim3) {
		rightPID.Encoder = __HAL_TIM_GET_COUNTER(htim);
	}
}
 8000d06:	e008      	b.n	8000d1a <HAL_TIM_IC_CaptureCallback+0x2e>
	} else if (htim == &htim3) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_TIM_IC_CaptureCallback+0x40>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d104      	bne.n	8000d1a <HAL_TIM_IC_CaptureCallback+0x2e>
		rightPID.Encoder = __HAL_TIM_GET_COUNTER(htim);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d16:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_TIM_IC_CaptureCallback+0x44>)
 8000d18:	6053      	str	r3, [r2, #4]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	200000c4 	.word	0x200000c4
 8000d28:	2000019c 	.word	0x2000019c
 8000d2c:	2000010c 	.word	0x2000010c
 8000d30:	200001c4 	.word	0x200001c4

08000d34 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <HAL_UART_RxCpltCallback+0x108>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d175      	bne.n	8000e34 <HAL_UART_RxCpltCallback+0x100>
//		if (!rx_index) {
//			for (int i = 0; i < 30; i++) {
//				rx_buffer[i] = '\0';
//			}
//		}
		if (rx_data == '\n' || rx_data == '\r' || rx_data == '/') {
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <HAL_UART_RxCpltCallback+0x10c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b0a      	cmp	r3, #10
 8000d4e:	d007      	beq.n	8000d60 <HAL_UART_RxCpltCallback+0x2c>
 8000d50:	4b3b      	ldr	r3, [pc, #236]	; (8000e40 <HAL_UART_RxCpltCallback+0x10c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b0d      	cmp	r3, #13
 8000d56:	d003      	beq.n	8000d60 <HAL_UART_RxCpltCallback+0x2c>
 8000d58:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <HAL_UART_RxCpltCallback+0x10c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b2f      	cmp	r3, #47	; 0x2f
 8000d5e:	d11b      	bne.n	8000d98 <HAL_UART_RxCpltCallback+0x64>
			if (rx_arg == 1)
 8000d60:	4b38      	ldr	r3, [pc, #224]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d106      	bne.n	8000d76 <HAL_UART_RxCpltCallback+0x42>
				rx_argv1[rx_index] = '\0';
 8000d68:	4b37      	ldr	r3, [pc, #220]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <HAL_UART_RxCpltCallback+0x118>)
 8000d70:	2100      	movs	r1, #0
 8000d72:	5499      	strb	r1, [r3, r2]
 8000d74:	e009      	b.n	8000d8a <HAL_UART_RxCpltCallback+0x56>
			else if (rx_arg == 2)
 8000d76:	4b33      	ldr	r3, [pc, #204]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d105      	bne.n	8000d8a <HAL_UART_RxCpltCallback+0x56>
				rx_argv2[rx_index] = '\0';
 8000d7e:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <HAL_UART_RxCpltCallback+0x11c>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	5499      	strb	r1, [r3, r2]
			flag_value = 1;
 8000d8a:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <HAL_UART_RxCpltCallback+0x120>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	701a      	strb	r2, [r3, #0]
			rx_index = 0;
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e048      	b.n	8000e2a <HAL_UART_RxCpltCallback+0xf6>
		} else if (rx_data == ' ') {
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <HAL_UART_RxCpltCallback+0x10c>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b20      	cmp	r3, #32
 8000d9e:	d118      	bne.n	8000dd2 <HAL_UART_RxCpltCallback+0x9e>
			if (rx_arg == 0)
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d103      	bne.n	8000db0 <HAL_UART_RxCpltCallback+0x7c>
				rx_arg = 1;
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e03c      	b.n	8000e2a <HAL_UART_RxCpltCallback+0xf6>
			else if (rx_arg == 1) {
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d138      	bne.n	8000e2a <HAL_UART_RxCpltCallback+0xf6>
				rx_argv1[rx_index] = '\0';
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_UART_RxCpltCallback+0x118>)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	5499      	strb	r1, [r3, r2]
				rx_arg = 2;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	701a      	strb	r2, [r3, #0]
				rx_index = 0;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	e02b      	b.n	8000e2a <HAL_UART_RxCpltCallback+0xf6>
			}
		} else {
			if (rx_arg == 0) {
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d104      	bne.n	8000de4 <HAL_UART_RxCpltCallback+0xb0>
				// The first arg is the single-letter command
				rx_cmd = rx_data;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_UART_RxCpltCallback+0x10c>)
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <HAL_UART_RxCpltCallback+0x124>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e022      	b.n	8000e2a <HAL_UART_RxCpltCallback+0xf6>
			} else if (rx_arg == 1) {
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d10d      	bne.n	8000e08 <HAL_UART_RxCpltCallback+0xd4>
				// Subsequent arguments can be more than one character
				rx_argv1[rx_index] = rx_data;
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_UART_RxCpltCallback+0x10c>)
 8000df4:	7819      	ldrb	r1, [r3, #0]
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <HAL_UART_RxCpltCallback+0x118>)
 8000df8:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	e010      	b.n	8000e2a <HAL_UART_RxCpltCallback+0xf6>
			} else if (rx_arg == 2) {
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_RxCpltCallback+0x110>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d10c      	bne.n	8000e2a <HAL_UART_RxCpltCallback+0xf6>
				rx_argv2[rx_index] = rx_data;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_UART_RxCpltCallback+0x10c>)
 8000e18:	7819      	ldrb	r1, [r3, #0]
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_UART_RxCpltCallback+0x11c>)
 8000e1c:	5499      	strb	r1, [r3, r2]
				rx_index++;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_UART_RxCpltCallback+0x114>)
 8000e28:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	4904      	ldr	r1, [pc, #16]	; (8000e40 <HAL_UART_RxCpltCallback+0x10c>)
 8000e2e:	4803      	ldr	r0, [pc, #12]	; (8000e3c <HAL_UART_RxCpltCallback+0x108>)
 8000e30:	f002 fed0 	bl	8003bd4 <HAL_UART_Receive_IT>
	}
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000154 	.word	0x20000154
 8000e40:	20000212 	.word	0x20000212
 8000e44:	20000210 	.word	0x20000210
 8000e48:	20000211 	.word	0x20000211
 8000e4c:	20000214 	.word	0x20000214
 8000e50:	20000228 	.word	0x20000228
 8000e54:	2000020e 	.word	0x2000020e
 8000e58:	20000213 	.word	0x20000213

08000e5c <calculate_crc8>:
uint8_t calculate_crc8(uint8_t *pcBlock, uint8_t len) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0xFF;
 8000e68:	23ff      	movs	r3, #255	; 0xff
 8000e6a:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	while (len--) {
 8000e6c:	e01f      	b.n	8000eae <calculate_crc8+0x52>
		crc ^= *pcBlock++;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	4053      	eors	r3, r2
 8000e7a:	73fb      	strb	r3, [r7, #15]

		for (i = 0; i < 8; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73bb      	strb	r3, [r7, #14]
 8000e80:	e012      	b.n	8000ea8 <calculate_crc8+0x4c>
			crc = crc & 0x80 ? (crc << 1) ^ CRC8_POLYNOMIAL : crc << 1;
 8000e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	da07      	bge.n	8000e9a <calculate_crc8+0x3e>
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8000e94:	b25b      	sxtb	r3, r3
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	e002      	b.n	8000ea0 <calculate_crc8+0x44>
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < 8; i++)
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	73bb      	strb	r3, [r7, #14]
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	2b07      	cmp	r3, #7
 8000eac:	d9e9      	bls.n	8000e82 <calculate_crc8+0x26>
	while (len--) {
 8000eae:	78fb      	ldrb	r3, [r7, #3]
 8000eb0:	1e5a      	subs	r2, r3, #1
 8000eb2:	70fa      	strb	r2, [r7, #3]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1da      	bne.n	8000e6e <calculate_crc8+0x12>
	}

	return crc;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <resetCommand>:
void resetCommand() {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	rx_cmd = '\0';
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <resetCommand+0x30>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	memset(rx_argv1, 0, sizeof(rx_argv1));
 8000ece:	2214      	movs	r2, #20
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <resetCommand+0x34>)
 8000ed4:	f003 fcd0 	bl	8004878 <memset>
	memset(rx_argv2, 0, sizeof(rx_argv2));
 8000ed8:	2214      	movs	r2, #20
 8000eda:	2100      	movs	r1, #0
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <resetCommand+0x38>)
 8000ede:	f003 fccb 	bl	8004878 <memset>
	rx_arg = 0;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <resetCommand+0x3c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
	rx_index = 0;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <resetCommand+0x40>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000213 	.word	0x20000213
 8000ef8:	20000214 	.word	0x20000214
 8000efc:	20000228 	.word	0x20000228
 8000f00:	20000210 	.word	0x20000210
 8000f04:	20000211 	.word	0x20000211

08000f08 <runCommand>:
void runCommand() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af02      	add	r7, sp, #8
	int i = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
	char *p = (char*) rx_argv1;
 8000f12:	4bae      	ldr	r3, [pc, #696]	; (80011cc <runCommand+0x2c4>)
 8000f14:	617b      	str	r3, [r7, #20]
	char *str;
	int pid_args[4];
	int rx_arg1 = atoi((char*) rx_argv1);
 8000f16:	48ad      	ldr	r0, [pc, #692]	; (80011cc <runCommand+0x2c4>)
 8000f18:	f003 fc02 	bl	8004720 <atoi>
 8000f1c:	6238      	str	r0, [r7, #32]
	int rx_arg2 = atoi((char*) rx_argv2);
 8000f1e:	48ac      	ldr	r0, [pc, #688]	; (80011d0 <runCommand+0x2c8>)
 8000f20:	f003 fbfe 	bl	8004720 <atoi>
 8000f24:	61f8      	str	r0, [r7, #28]
	//sprintf((char*)tx_buffer,"%c %d %d\n",rx_cmd,rx_arg1,rx_arg2);
//	HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*)tx_buffer), HAL_MAX_DELAY);
	switch (rx_cmd) {
 8000f26:	4bab      	ldr	r3, [pc, #684]	; (80011d4 <runCommand+0x2cc>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3b65      	subs	r3, #101	; 0x65
 8000f2c:	2b10      	cmp	r3, #16
 8000f2e:	f200 81ae 	bhi.w	800128e <runCommand+0x386>
 8000f32:	a201      	add	r2, pc, #4	; (adr r2, 8000f38 <runCommand+0x30>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f7d 	.word	0x08000f7d
 8000f3c:	0800128f 	.word	0x0800128f
 8000f40:	0800128f 	.word	0x0800128f
 8000f44:	0800128f 	.word	0x0800128f
 8000f48:	0800128f 	.word	0x0800128f
 8000f4c:	0800128f 	.word	0x0800128f
 8000f50:	0800128f 	.word	0x0800128f
 8000f54:	0800128f 	.word	0x0800128f
 8000f58:	08001065 	.word	0x08001065
 8000f5c:	0800128f 	.word	0x0800128f
 8000f60:	080010c5 	.word	0x080010c5
 8000f64:	08001215 	.word	0x08001215
 8000f68:	0800128f 	.word	0x0800128f
 8000f6c:	08001015 	.word	0x08001015
 8000f70:	08000fc9 	.word	0x08000fc9
 8000f74:	0800128f 	.word	0x0800128f
 8000f78:	080010fb 	.word	0x080010fb
	case READ_ENCODERS:
//		sprintf((char*) tx_buffer, "%ld %ld\n", leftPID.Encoder,
//				rightPID.Encoder);
		tx_buffer[0] = leftPID.Encoder & 0xFF;
 8000f7c:	4b96      	ldr	r3, [pc, #600]	; (80011d8 <runCommand+0x2d0>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b96      	ldr	r3, [pc, #600]	; (80011dc <runCommand+0x2d4>)
 8000f84:	701a      	strb	r2, [r3, #0]
		tx_buffer[1] = (leftPID.Encoder >> 8) & 0xFF;
 8000f86:	4b94      	ldr	r3, [pc, #592]	; (80011d8 <runCommand+0x2d0>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b93      	ldr	r3, [pc, #588]	; (80011dc <runCommand+0x2d4>)
 8000f90:	705a      	strb	r2, [r3, #1]

		tx_buffer[2] = rightPID.Encoder & 0xFF;
 8000f92:	4b93      	ldr	r3, [pc, #588]	; (80011e0 <runCommand+0x2d8>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b90      	ldr	r3, [pc, #576]	; (80011dc <runCommand+0x2d4>)
 8000f9a:	709a      	strb	r2, [r3, #2]
		tx_buffer[3] = (rightPID.Encoder >> 8) & 0xFF;
 8000f9c:	4b90      	ldr	r3, [pc, #576]	; (80011e0 <runCommand+0x2d8>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b8d      	ldr	r3, [pc, #564]	; (80011dc <runCommand+0x2d4>)
 8000fa6:	70da      	strb	r2, [r3, #3]

		tx_buffer[4] = calculate_crc8(tx_buffer, 4);
 8000fa8:	2104      	movs	r1, #4
 8000faa:	488c      	ldr	r0, [pc, #560]	; (80011dc <runCommand+0x2d4>)
 8000fac:	f7ff ff56 	bl	8000e5c <calculate_crc8>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b89      	ldr	r3, [pc, #548]	; (80011dc <runCommand+0x2d4>)
 8000fb6:	711a      	strb	r2, [r3, #4]

		HAL_UART_Transmit(&huart1, tx_buffer, 5, HAL_MAX_DELAY);
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	4987      	ldr	r1, [pc, #540]	; (80011dc <runCommand+0x2d4>)
 8000fc0:	4888      	ldr	r0, [pc, #544]	; (80011e4 <runCommand+0x2dc>)
 8000fc2:	f002 fd84 	bl	8003ace <HAL_UART_Transmit>
		break;
 8000fc6:	e163      	b.n	8001290 <runCommand+0x388>
	case READ_SPEED:
//		sprintf((char*) tx_buffer, "%ld %ld\n", leftPID.speed, rightPID.speed);
		tx_buffer[0] = (leftPID.speed >> 8) & 0xFF;
 8000fc8:	4b83      	ldr	r3, [pc, #524]	; (80011d8 <runCommand+0x2d0>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b82      	ldr	r3, [pc, #520]	; (80011dc <runCommand+0x2d4>)
 8000fd2:	701a      	strb	r2, [r3, #0]
		tx_buffer[1] = leftPID.speed & 0xFF;
 8000fd4:	4b80      	ldr	r3, [pc, #512]	; (80011d8 <runCommand+0x2d0>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4b80      	ldr	r3, [pc, #512]	; (80011dc <runCommand+0x2d4>)
 8000fdc:	705a      	strb	r2, [r3, #1]

		tx_buffer[2] = (rightPID.speed >> 8) & 0xFF;
 8000fde:	4b80      	ldr	r3, [pc, #512]	; (80011e0 <runCommand+0x2d8>)
 8000fe0:	68db      	ldr	r3, [r3, #12]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	; (80011dc <runCommand+0x2d4>)
 8000fe8:	709a      	strb	r2, [r3, #2]
		tx_buffer[3] = rightPID.speed & 0xFF;
 8000fea:	4b7d      	ldr	r3, [pc, #500]	; (80011e0 <runCommand+0x2d8>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b7a      	ldr	r3, [pc, #488]	; (80011dc <runCommand+0x2d4>)
 8000ff2:	70da      	strb	r2, [r3, #3]

		tx_buffer[4] = calculate_crc8(tx_buffer, 4);
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4879      	ldr	r0, [pc, #484]	; (80011dc <runCommand+0x2d4>)
 8000ff8:	f7ff ff30 	bl	8000e5c <calculate_crc8>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b76      	ldr	r3, [pc, #472]	; (80011dc <runCommand+0x2d4>)
 8001002:	711a      	strb	r2, [r3, #4]

		HAL_UART_Transmit(&huart1, tx_buffer, 5, HAL_MAX_DELAY);
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	2205      	movs	r2, #5
 800100a:	4974      	ldr	r1, [pc, #464]	; (80011dc <runCommand+0x2d4>)
 800100c:	4875      	ldr	r0, [pc, #468]	; (80011e4 <runCommand+0x2dc>)
 800100e:	f002 fd5e 	bl	8003ace <HAL_UART_Transmit>
		break;
 8001012:	e13d      	b.n	8001290 <runCommand+0x388>
	case RESET_ENCODERS:
		__HAL_TIM_SET_COUNTER(&htim2, 0x00);
 8001014:	4b74      	ldr	r3, [pc, #464]	; (80011e8 <runCommand+0x2e0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_COUNTER(&htim3, 0x00);
 800101c:	4b73      	ldr	r3, [pc, #460]	; (80011ec <runCommand+0x2e4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	; 0x24
		initPID(&leftPID);
 8001024:	486c      	ldr	r0, [pc, #432]	; (80011d8 <runCommand+0x2d0>)
 8001026:	f7ff fcdd 	bl	80009e4 <initPID>
		initPID(&rightPID);
 800102a:	486d      	ldr	r0, [pc, #436]	; (80011e0 <runCommand+0x2d8>)
 800102c:	f7ff fcda 	bl	80009e4 <initPID>
		if (__HAL_TIM_GET_COUNTER(&htim2) == 0x00 && __HAL_TIM_GET_COUNTER(&htim3) == 0x00)
 8001030:	4b6d      	ldr	r3, [pc, #436]	; (80011e8 <runCommand+0x2e0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <runCommand+0x14c>
 800103a:	4b6c      	ldr	r3, [pc, #432]	; (80011ec <runCommand+0x2e4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	2b00      	cmp	r3, #0
 8001042:	d107      	bne.n	8001054 <runCommand+0x14c>
			HAL_UART_Transmit(&huart1, (uint8_t*) "OK\n", 3, HAL_MAX_DELAY);
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	2203      	movs	r2, #3
 800104a:	4969      	ldr	r1, [pc, #420]	; (80011f0 <runCommand+0x2e8>)
 800104c:	4865      	ldr	r0, [pc, #404]	; (80011e4 <runCommand+0x2dc>)
 800104e:	f002 fd3e 	bl	8003ace <HAL_UART_Transmit>
		else
			HAL_UART_Transmit(&huart1, (uint8_t*) "ERROR\n", 6, HAL_MAX_DELAY);
		break;
 8001052:	e11d      	b.n	8001290 <runCommand+0x388>
			HAL_UART_Transmit(&huart1, (uint8_t*) "ERROR\n", 6, HAL_MAX_DELAY);
 8001054:	f04f 33ff 	mov.w	r3, #4294967295
 8001058:	2206      	movs	r2, #6
 800105a:	4966      	ldr	r1, [pc, #408]	; (80011f4 <runCommand+0x2ec>)
 800105c:	4861      	ldr	r0, [pc, #388]	; (80011e4 <runCommand+0x2dc>)
 800105e:	f002 fd36 	bl	8003ace <HAL_UART_Transmit>
		break;
 8001062:	e115      	b.n	8001290 <runCommand+0x388>
	case MOTOR_SPEEDS:
		if (rx_arg1 == 0 && rx_arg2 == 0) {
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <runCommand+0x170>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d103      	bne.n	8001078 <runCommand+0x170>
			flag_moving = 1;
 8001070:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <runCommand+0x2f0>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e002      	b.n	800107e <runCommand+0x176>
//			setMotorSpeeds(0, 0);
//			resetPID(&leftPID);
//			resetPID(&rightPID);
//			moving = 0;
		} else
			moving = 1;
 8001078:	4b60      	ldr	r3, [pc, #384]	; (80011fc <runCommand+0x2f4>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
		leftPID.TargetTicksPerFrame = rx_arg1 * PID_TIME / 1000;
 800107e:	6a3a      	ldr	r2, [r7, #32]
 8001080:	4613      	mov	r3, r2
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	4a5d      	ldr	r2, [pc, #372]	; (8001200 <runCommand+0x2f8>)
 800108a:	fb82 1203 	smull	r1, r2, r2, r3
 800108e:	1192      	asrs	r2, r2, #6
 8001090:	17db      	asrs	r3, r3, #31
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fc2b 	bl	80008f0 <__aeabi_i2f>
 800109a:	4603      	mov	r3, r0
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <runCommand+0x2d0>)
 800109e:	6013      	str	r3, [r2, #0]
		rightPID.TargetTicksPerFrame = rx_arg2 * PID_TIME / 1000;
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	4613      	mov	r3, r2
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4a55      	ldr	r2, [pc, #340]	; (8001200 <runCommand+0x2f8>)
 80010ac:	fb82 1203 	smull	r1, r2, r2, r3
 80010b0:	1192      	asrs	r2, r2, #6
 80010b2:	17db      	asrs	r3, r3, #31
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fc1a 	bl	80008f0 <__aeabi_i2f>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a48      	ldr	r2, [pc, #288]	; (80011e0 <runCommand+0x2d8>)
 80010c0:	6013      	str	r3, [r2, #0]
		break;
 80010c2:	e0e5      	b.n	8001290 <runCommand+0x388>
	case MOTOR_RAW_PWM:
		resetPID(&leftPID);
 80010c4:	4844      	ldr	r0, [pc, #272]	; (80011d8 <runCommand+0x2d0>)
 80010c6:	f7ff fcbb 	bl	8000a40 <resetPID>
		resetPID(&rightPID);
 80010ca:	4845      	ldr	r0, [pc, #276]	; (80011e0 <runCommand+0x2d8>)
 80010cc:	f7ff fcb8 	bl	8000a40 <resetPID>
		moving = 0;
 80010d0:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <runCommand+0x2f4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
		setMotorSpeeds(rx_arg1, rx_arg2);
 80010d6:	69f9      	ldr	r1, [r7, #28]
 80010d8:	6a38      	ldr	r0, [r7, #32]
 80010da:	f000 fb95 	bl	8001808 <setMotorSpeeds>
		break;
 80010de:	e0d7      	b.n	8001290 <runCommand+0x388>
	case UPDATE_PID:
		while (*(str = strtok_r(p, ":", &p)) != '\0') {
			pid_args[i] = atoi(str);
 80010e0:	69b8      	ldr	r0, [r7, #24]
 80010e2:	f003 fb1d 	bl	8004720 <atoi>
 80010e6:	4602      	mov	r2, r0
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	3328      	adds	r3, #40	; 0x28
 80010ee:	443b      	add	r3, r7
 80010f0:	f843 2c24 	str.w	r2, [r3, #-36]
			i++;
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	3301      	adds	r3, #1
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
		while (*(str = strtok_r(p, ":", &p)) != '\0') {
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	f107 0214 	add.w	r2, r7, #20
 8001100:	4940      	ldr	r1, [pc, #256]	; (8001204 <runCommand+0x2fc>)
 8001102:	4618      	mov	r0, r3
 8001104:	f003 fbe8 	bl	80048d8 <strtok_r>
 8001108:	61b8      	str	r0, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1e6      	bne.n	80010e0 <runCommand+0x1d8>
		}
		if (i == 4) {
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	2b04      	cmp	r3, #4
 8001116:	d151      	bne.n	80011bc <runCommand+0x2b4>
			leftPID.Kp = pid_args[0];
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	b29a      	uxth	r2, r3
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <runCommand+0x2d0>)
 800111e:	841a      	strh	r2, [r3, #32]
			leftPID.Ki = pid_args[1] * PID_TIME / 1000;
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	4613      	mov	r3, r2
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4a35      	ldr	r2, [pc, #212]	; (8001200 <runCommand+0x2f8>)
 800112c:	fb82 1203 	smull	r1, r2, r2, r3
 8001130:	1192      	asrs	r2, r2, #6
 8001132:	17db      	asrs	r3, r3, #31
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b29a      	uxth	r2, r3
 8001138:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <runCommand+0x2d0>)
 800113a:	845a      	strh	r2, [r3, #34]	; 0x22
			leftPID.Kd = pid_args[2] * 1000 / PID_TIME;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	4a30      	ldr	r2, [pc, #192]	; (8001208 <runCommand+0x300>)
 8001148:	fb82 1203 	smull	r1, r2, r2, r3
 800114c:	441a      	add	r2, r3
 800114e:	1112      	asrs	r2, r2, #4
 8001150:	17db      	asrs	r3, r3, #31
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <runCommand+0x2d0>)
 8001158:	849a      	strh	r2, [r3, #36]	; 0x24
			leftPID.Ko = pid_args[3];
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <runCommand+0x2d0>)
 8001160:	84da      	strh	r2, [r3, #38]	; 0x26

			rightPID.Kp = pid_args[0];
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <runCommand+0x2d8>)
 8001168:	841a      	strh	r2, [r3, #32]
			rightPID.Ki = pid_args[1] * PID_TIME / 1000;
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	4613      	mov	r3, r2
 800116e:	011b      	lsls	r3, r3, #4
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <runCommand+0x2f8>)
 8001176:	fb82 1203 	smull	r1, r2, r2, r3
 800117a:	1192      	asrs	r2, r2, #6
 800117c:	17db      	asrs	r3, r3, #31
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	b29a      	uxth	r2, r3
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <runCommand+0x2d8>)
 8001184:	845a      	strh	r2, [r3, #34]	; 0x22
			rightPID.Kd = pid_args[2] * 1000 / PID_TIME;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800118c:	fb02 f303 	mul.w	r3, r2, r3
 8001190:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <runCommand+0x300>)
 8001192:	fb82 1203 	smull	r1, r2, r2, r3
 8001196:	441a      	add	r2, r3
 8001198:	1112      	asrs	r2, r2, #4
 800119a:	17db      	asrs	r3, r3, #31
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <runCommand+0x2d8>)
 80011a2:	849a      	strh	r2, [r3, #36]	; 0x24
			rightPID.Ko = pid_args[3];
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <runCommand+0x2d8>)
 80011aa:	84da      	strh	r2, [r3, #38]	; 0x26

			HAL_UART_Transmit(&huart1, (uint8_t*) "PID'S SET!\n", 11,
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	220b      	movs	r2, #11
 80011b2:	4916      	ldr	r1, [pc, #88]	; (800120c <runCommand+0x304>)
 80011b4:	480b      	ldr	r0, [pc, #44]	; (80011e4 <runCommand+0x2dc>)
 80011b6:	f002 fc8a 	bl	8003ace <HAL_UART_Transmit>
			HAL_MAX_DELAY);
		} else {
			HAL_UART_Transmit(&huart1, (uint8_t*) "ERROR!\n", 7, HAL_MAX_DELAY);
		}
		break;
 80011ba:	e069      	b.n	8001290 <runCommand+0x388>
			HAL_UART_Transmit(&huart1, (uint8_t*) "ERROR!\n", 7, HAL_MAX_DELAY);
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	2207      	movs	r2, #7
 80011c2:	4913      	ldr	r1, [pc, #76]	; (8001210 <runCommand+0x308>)
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <runCommand+0x2dc>)
 80011c6:	f002 fc82 	bl	8003ace <HAL_UART_Transmit>
		break;
 80011ca:	e061      	b.n	8001290 <runCommand+0x388>
 80011cc:	20000214 	.word	0x20000214
 80011d0:	20000228 	.word	0x20000228
 80011d4:	20000213 	.word	0x20000213
 80011d8:	2000019c 	.word	0x2000019c
 80011dc:	200001f0 	.word	0x200001f0
 80011e0:	200001c4 	.word	0x200001c4
 80011e4:	20000154 	.word	0x20000154
 80011e8:	200000c4 	.word	0x200000c4
 80011ec:	2000010c 	.word	0x2000010c
 80011f0:	0800520c 	.word	0x0800520c
 80011f4:	08005210 	.word	0x08005210
 80011f8:	2000020f 	.word	0x2000020f
 80011fc:	200001ec 	.word	0x200001ec
 8001200:	10624dd3 	.word	0x10624dd3
 8001204:	08005218 	.word	0x08005218
 8001208:	88888889 	.word	0x88888889
 800120c:	0800521c 	.word	0x0800521c
 8001210:	08005228 	.word	0x08005228
	case READ_PID:
		sprintf((char*) tx_buffer, "Left PID: %d %d %d %d\n", leftPID.Kp,
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <runCommand+0x390>)
 8001216:	8c1b      	ldrh	r3, [r3, #32]
 8001218:	4619      	mov	r1, r3
				leftPID.Ki, leftPID.Kd, leftPID.Ko);
 800121a:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <runCommand+0x390>)
 800121c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
		sprintf((char*) tx_buffer, "Left PID: %d %d %d %d\n", leftPID.Kp,
 800121e:	4618      	mov	r0, r3
				leftPID.Ki, leftPID.Kd, leftPID.Ko);
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <runCommand+0x390>)
 8001222:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		sprintf((char*) tx_buffer, "Left PID: %d %d %d %d\n", leftPID.Kp,
 8001224:	461a      	mov	r2, r3
				leftPID.Ki, leftPID.Kd, leftPID.Ko);
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <runCommand+0x390>)
 8001228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
		sprintf((char*) tx_buffer, "Left PID: %d %d %d %d\n", leftPID.Kp,
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	9200      	str	r2, [sp, #0]
 800122e:	4603      	mov	r3, r0
 8001230:	460a      	mov	r2, r1
 8001232:	491a      	ldr	r1, [pc, #104]	; (800129c <runCommand+0x394>)
 8001234:	481a      	ldr	r0, [pc, #104]	; (80012a0 <runCommand+0x398>)
 8001236:	f003 faff 	bl	8004838 <siprintf>
		HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*) tx_buffer),
 800123a:	4819      	ldr	r0, [pc, #100]	; (80012a0 <runCommand+0x398>)
 800123c:	f7fe ff88 	bl	8000150 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	4915      	ldr	r1, [pc, #84]	; (80012a0 <runCommand+0x398>)
 800124a:	4816      	ldr	r0, [pc, #88]	; (80012a4 <runCommand+0x39c>)
 800124c:	f002 fc3f 	bl	8003ace <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		sprintf((char*) tx_buffer, "Right PID: %d %d %d %d\n", leftPID.Kp,
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <runCommand+0x390>)
 8001252:	8c1b      	ldrh	r3, [r3, #32]
 8001254:	4619      	mov	r1, r3
				leftPID.Ki, leftPID.Kd, leftPID.Ko);
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <runCommand+0x390>)
 8001258:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
		sprintf((char*) tx_buffer, "Right PID: %d %d %d %d\n", leftPID.Kp,
 800125a:	4618      	mov	r0, r3
				leftPID.Ki, leftPID.Kd, leftPID.Ko);
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <runCommand+0x390>)
 800125e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
		sprintf((char*) tx_buffer, "Right PID: %d %d %d %d\n", leftPID.Kp,
 8001260:	461a      	mov	r2, r3
				leftPID.Ki, leftPID.Kd, leftPID.Ko);
 8001262:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <runCommand+0x390>)
 8001264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
		sprintf((char*) tx_buffer, "Right PID: %d %d %d %d\n", leftPID.Kp,
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	9200      	str	r2, [sp, #0]
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <runCommand+0x3a0>)
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <runCommand+0x398>)
 8001272:	f003 fae1 	bl	8004838 <siprintf>
		HAL_UART_Transmit(&huart1, tx_buffer, strlen((char*) tx_buffer),
 8001276:	480a      	ldr	r0, [pc, #40]	; (80012a0 <runCommand+0x398>)
 8001278:	f7fe ff6a 	bl	8000150 <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	4906      	ldr	r1, [pc, #24]	; (80012a0 <runCommand+0x398>)
 8001286:	4807      	ldr	r0, [pc, #28]	; (80012a4 <runCommand+0x39c>)
 8001288:	f002 fc21 	bl	8003ace <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		break;
 800128c:	e000      	b.n	8001290 <runCommand+0x388>
	default:
		break;
 800128e:	bf00      	nop
	}
}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	2000019c 	.word	0x2000019c
 800129c:	08005230 	.word	0x08005230
 80012a0:	200001f0 	.word	0x200001f0
 80012a4:	20000154 	.word	0x20000154
 80012a8:	08005248 	.word	0x08005248

080012ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012b0:	f000 fccc 	bl	8001c4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012b4:	f000 f84c 	bl	8001350 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012b8:	f000 f9f2 	bl	80016a0 <MX_GPIO_Init>
	MX_TIM1_Init();
 80012bc:	f000 f88e 	bl	80013dc <MX_TIM1_Init>
	MX_TIM2_Init();
 80012c0:	f000 f91c 	bl	80014fc <MX_TIM2_Init>
	MX_TIM3_Init();
 80012c4:	f000 f96e 	bl	80015a4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80012c8:	f000 f9c0 	bl	800164c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
//	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
//	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
	HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80012cc:	2201      	movs	r2, #1
 80012ce:	4918      	ldr	r1, [pc, #96]	; (8001330 <main+0x84>)
 80012d0:	4818      	ldr	r0, [pc, #96]	; (8001334 <main+0x88>)
 80012d2:	f002 fc7f 	bl	8003bd4 <HAL_UART_Receive_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80012d6:	2100      	movs	r1, #0
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <main+0x8c>)
 80012da:	f001 fcf9 	bl	8002cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80012de:	210c      	movs	r1, #12
 80012e0:	4815      	ldr	r0, [pc, #84]	; (8001338 <main+0x8c>)
 80012e2:	f001 fcf5 	bl	8002cd0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80012e6:	213c      	movs	r1, #60	; 0x3c
 80012e8:	4814      	ldr	r0, [pc, #80]	; (800133c <main+0x90>)
 80012ea:	f001 fe35 	bl	8002f58 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80012ee:	213c      	movs	r1, #60	; 0x3c
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <main+0x94>)
 80012f2:	f001 fe31 	bl	8002f58 <HAL_TIM_Encoder_Start_IT>

	initPID(&leftPID);
 80012f6:	4813      	ldr	r0, [pc, #76]	; (8001344 <main+0x98>)
 80012f8:	f7ff fb74 	bl	80009e4 <initPID>
	initPID(&rightPID);
 80012fc:	4812      	ldr	r0, [pc, #72]	; (8001348 <main+0x9c>)
 80012fe:	f7ff fb71 	bl	80009e4 <initPID>
	HAL_Delay(500);
 8001302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001306:	f000 fd03 	bl	8001d10 <HAL_Delay>
	resetPID(&leftPID);
 800130a:	480e      	ldr	r0, [pc, #56]	; (8001344 <main+0x98>)
 800130c:	f7ff fb98 	bl	8000a40 <resetPID>
	resetPID(&rightPID);
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <main+0x9c>)
 8001312:	f7ff fb95 	bl	8000a40 <resetPID>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (flag_value) {
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <main+0xa0>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0fb      	beq.n	8001316 <main+0x6a>
			runCommand();
 800131e:	f7ff fdf3 	bl	8000f08 <runCommand>
			resetCommand();
 8001322:	f7ff fdcf 	bl	8000ec4 <resetCommand>
			flag_value = 0;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <main+0xa0>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
		if (flag_value) {
 800132c:	e7f3      	b.n	8001316 <main+0x6a>
 800132e:	bf00      	nop
 8001330:	20000212 	.word	0x20000212
 8001334:	20000154 	.word	0x20000154
 8001338:	2000007c 	.word	0x2000007c
 800133c:	200000c4 	.word	0x200000c4
 8001340:	2000010c 	.word	0x2000010c
 8001344:	2000019c 	.word	0x2000019c
 8001348:	200001c4 	.word	0x200001c4
 800134c:	2000020e 	.word	0x2000020e

08001350 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fa8a 	bl	8004878 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001380:	2301      	movs	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001384:	2302      	movs	r3, #2
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800138e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	4618      	mov	r0, r3
 800139a:	f001 f839 	bl	8002410 <HAL_RCC_OscConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x58>
		Error_Handler();
 80013a4:	f000 f9c8 	bl	8001738 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013a8:	230f      	movs	r3, #15
 80013aa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ac:	2302      	movs	r3, #2
 80013ae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2102      	movs	r1, #2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 faa6 	bl	8002914 <HAL_RCC_ClockConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x82>
		Error_Handler();
 80013ce:	f000 f9b3 	bl	8001738 <Error_Handler>
	}
}
 80013d2:	bf00      	nop
 80013d4:	3740      	adds	r7, #64	; 0x40
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b092      	sub	sp, #72	; 0x48
 80013e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80013ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	615a      	str	r2, [r3, #20]
 80013fe:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2220      	movs	r2, #32
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fa36 	bl	8004878 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800140c:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <MX_TIM1_Init+0x118>)
 800140e:	4a3a      	ldr	r2, [pc, #232]	; (80014f8 <MX_TIM1_Init+0x11c>)
 8001410:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 8001412:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <MX_TIM1_Init+0x118>)
 8001414:	2247      	movs	r2, #71	; 0x47
 8001416:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <MX_TIM1_Init+0x118>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 800141e:	4b35      	ldr	r3, [pc, #212]	; (80014f4 <MX_TIM1_Init+0x118>)
 8001420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001424:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b33      	ldr	r3, [pc, #204]	; (80014f4 <MX_TIM1_Init+0x118>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <MX_TIM1_Init+0x118>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b30      	ldr	r3, [pc, #192]	; (80014f4 <MX_TIM1_Init+0x118>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001438:	482e      	ldr	r0, [pc, #184]	; (80014f4 <MX_TIM1_Init+0x118>)
 800143a:	f001 fbf9 	bl	8002c30 <HAL_TIM_PWM_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM1_Init+0x6c>
		Error_Handler();
 8001444:	f000 f978 	bl	8001738 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001450:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001454:	4619      	mov	r1, r3
 8001456:	4827      	ldr	r0, [pc, #156]	; (80014f4 <MX_TIM1_Init+0x118>)
 8001458:	f002 fa28 	bl	80038ac <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001462:	f000 f969 	bl	8001738 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001466:	2360      	movs	r3, #96	; 0x60
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	2200      	movs	r2, #0
 8001488:	4619      	mov	r1, r3
 800148a:	481a      	ldr	r0, [pc, #104]	; (80014f4 <MX_TIM1_Init+0x118>)
 800148c:	f001 ff1a 	bl	80032c4 <HAL_TIM_PWM_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8001496:	f000 f94f 	bl	8001738 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	220c      	movs	r2, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <MX_TIM1_Init+0x118>)
 80014a4:	f001 ff0e 	bl	80032c4 <HAL_TIM_PWM_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM1_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 80014ae:	f000 f943 	bl	8001738 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ca:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <MX_TIM1_Init+0x118>)
 80014d6:	f002 fa47 	bl	8003968 <HAL_TIMEx_ConfigBreakDeadTime>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0x108>
			!= HAL_OK) {
		Error_Handler();
 80014e0:	f000 f92a 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <MX_TIM1_Init+0x118>)
 80014e6:	f000 fa61 	bl	80019ac <HAL_TIM_MspPostInit>

}
 80014ea:	bf00      	nop
 80014ec:	3748      	adds	r7, #72	; 0x48
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000007c 	.word	0x2000007c
 80014f8:	40012c00 	.word	0x40012c00

080014fc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f003 f9b4 	bl	8004878 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001518:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <MX_TIM2_Init+0xa4>)
 800151a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001520:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <MX_TIM2_Init+0xa4>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_TIM2_Init+0xa4>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <MX_TIM2_Init+0xa4>)
 800152e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001532:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_TIM2_Init+0xa4>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <MX_TIM2_Init+0xa4>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001540:	2303      	movs	r3, #3
 8001542:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001558:	2301      	movs	r3, #1
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	4619      	mov	r1, r3
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <MX_TIM2_Init+0xa4>)
 800156c:	f001 fc52 	bl	8002e14 <HAL_TIM_Encoder_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x7e>
		Error_Handler();
 8001576:	f000 f8df 	bl	8001738 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_TIM2_Init+0xa4>)
 8001588:	f002 f990 	bl	80038ac <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001592:	f000 f8d1 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	3730      	adds	r7, #48	; 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000c4 	.word	0x200000c4

080015a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	; 0x30
 80015a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2224      	movs	r2, #36	; 0x24
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 f960 	bl	8004878 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015c2:	4a21      	ldr	r2, [pc, #132]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015c4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_TIM3_Init+0xa0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015e6:	2303      	movs	r3, #3
 80015e8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ee:	2301      	movs	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015fe:	2301      	movs	r3, #1
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	4619      	mov	r1, r3
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <MX_TIM3_Init+0xa0>)
 8001612:	f001 fbff 	bl	8002e14 <HAL_TIM_Encoder_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0x7c>
		Error_Handler();
 800161c:	f000 f88c 	bl	8001738 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_TIM3_Init+0xa0>)
 800162e:	f002 f93d 	bl	80038ac <HAL_TIMEx_MasterConfigSynchronization>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8001638:	f000 f87e 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	; 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000010c 	.word	0x2000010c
 8001648:	40000400 	.word	0x40000400

0800164c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001652:	4a12      	ldr	r2, [pc, #72]	; (800169c <MX_USART1_UART_Init+0x50>)
 8001654:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800165c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001672:	220c      	movs	r2, #12
 8001674:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 800167e:	2200      	movs	r2, #0
 8001680:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_USART1_UART_Init+0x4c>)
 8001684:	f002 f9d3 	bl	8003a2e <HAL_UART_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800168e:	f000 f853 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000154 	.word	0x20000154
 800169c:	40013800 	.word	0x40013800

080016a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_GPIO_Init+0x90>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <MX_GPIO_Init+0x90>)
 80016ba:	f043 0320 	orr.w	r3, r3, #32
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_GPIO_Init+0x90>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0320 	and.w	r3, r3, #32
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_GPIO_Init+0x90>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <MX_GPIO_Init+0x90>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_GPIO_Init+0x90>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_GPIO_Init+0x90>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	4a11      	ldr	r2, [pc, #68]	; (8001730 <MX_GPIO_Init+0x90>)
 80016ea:	f043 0308 	orr.w	r3, r3, #8
 80016ee:	6193      	str	r3, [r2, #24]
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_GPIO_Init+0x90>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, IN1_Pin | IN2_Pin | IN3_Pin | IN4_Pin,
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001702:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_GPIO_Init+0x94>)
 8001704:	f000 fe6c 	bl	80023e0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
	GPIO_InitStruct.Pin = IN1_Pin | IN2_Pin | IN3_Pin | IN4_Pin;
 8001708:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800170c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2302      	movs	r3, #2
 8001718:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4619      	mov	r1, r3
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_GPIO_Init+0x94>)
 8001722:	f000 fcd9 	bl	80020d8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40010c00 	.word	0x40010c00

08001738 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173c:	b672      	cpsid	i
}
 800173e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x8>
	...

08001744 <setMotorSpeed>:
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
}
void setMotorSpeed(int i, int spd) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
	uint8_t reverse = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
	if (spd < 0) {
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	da04      	bge.n	8001762 <setMotorSpeed+0x1e>
		spd = -spd;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	425b      	negs	r3, r3
 800175c:	603b      	str	r3, [r7, #0]
		reverse = 1;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
	}
	if (spd > MAX_PWM)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001768:	dd02      	ble.n	8001770 <setMotorSpeed+0x2c>
		spd = MAX_PWM;
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	603b      	str	r3, [r7, #0]

	if (i == LEFT) {
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d120      	bne.n	80017b8 <setMotorSpeed+0x74>
		if (reverse) {
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <setMotorSpeed+0x52>
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001782:	481f      	ldr	r0, [pc, #124]	; (8001800 <setMotorSpeed+0xbc>)
 8001784:	f000 fe2c 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001788:	2200      	movs	r2, #0
 800178a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800178e:	481c      	ldr	r0, [pc, #112]	; (8001800 <setMotorSpeed+0xbc>)
 8001790:	f000 fe26 	bl	80023e0 <HAL_GPIO_WritePin>
 8001794:	e00b      	b.n	80017ae <setMotorSpeed+0x6a>
		} else {
			HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179c:	4818      	ldr	r0, [pc, #96]	; (8001800 <setMotorSpeed+0xbc>)
 800179e:	f000 fe1f 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <setMotorSpeed+0xbc>)
 80017aa:	f000 fe19 	bl	80023e0 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, spd);
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <setMotorSpeed+0xc0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
		}
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, spd);
	}

}
 80017b6:	e01f      	b.n	80017f8 <setMotorSpeed+0xb4>
		if (reverse) {
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00c      	beq.n	80017d8 <setMotorSpeed+0x94>
			HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 80017be:	2201      	movs	r2, #1
 80017c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c4:	480e      	ldr	r0, [pc, #56]	; (8001800 <setMotorSpeed+0xbc>)
 80017c6:	f000 fe0b 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <setMotorSpeed+0xbc>)
 80017d2:	f000 fe05 	bl	80023e0 <HAL_GPIO_WritePin>
 80017d6:	e00b      	b.n	80017f0 <setMotorSpeed+0xac>
			HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <setMotorSpeed+0xbc>)
 80017e0:	f000 fdfe 	bl	80023e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80017e4:	2201      	movs	r2, #1
 80017e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <setMotorSpeed+0xbc>)
 80017ec:	f000 fdf8 	bl	80023e0 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, spd);
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <setMotorSpeed+0xc0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40010c00 	.word	0x40010c00
 8001804:	2000007c 	.word	0x2000007c

08001808 <setMotorSpeeds>:
void setMotorSpeeds(int leftSpeed, int rightSpeed) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	setMotorSpeed(LEFT, leftSpeed);
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff ff95 	bl	8001744 <setMotorSpeed>
	setMotorSpeed(RIGHT, rightSpeed);
 800181a:	6839      	ldr	r1, [r7, #0]
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff ff91 	bl	8001744 <setMotorSpeed>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_MspInit+0x40>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	4a0d      	ldr	r2, [pc, #52]	; (800186c <HAL_MspInit+0x40>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6193      	str	r3, [r2, #24]
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_MspInit+0x40>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_MspInit+0x40>)
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_MspInit+0x40>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	61d3      	str	r3, [r2, #28]
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_MspInit+0x40>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <HAL_TIM_PWM_MspInit+0x44>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d113      	bne.n	80018aa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_TIM_PWM_MspInit+0x48>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a0c      	ldr	r2, [pc, #48]	; (80018b8 <HAL_TIM_PWM_MspInit+0x48>)
 8001888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_TIM_PWM_MspInit+0x48>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2019      	movs	r0, #25
 80018a0:	f000 fb31 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018a4:	2019      	movs	r0, #25
 80018a6:	f000 fb4a 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40012c00 	.word	0x40012c00
 80018b8:	40021000 	.word	0x40021000

080018bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018da:	d12c      	bne.n	8001936 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	61d3      	str	r3, [r2, #28]
 80018e8:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a29      	ldr	r2, [pc, #164]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800190c:	2303      	movs	r3, #3
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	4619      	mov	r1, r3
 800191e:	4821      	ldr	r0, [pc, #132]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001920:	f000 fbda 	bl	80020d8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	201c      	movs	r0, #28
 800192a:	f000 faec 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800192e:	201c      	movs	r0, #28
 8001930:	f000 fb05 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001934:	e030      	b.n	8001998 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM3)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <HAL_TIM_Encoder_MspInit+0xec>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d12b      	bne.n	8001998 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001942:	69db      	ldr	r3, [r3, #28]
 8001944:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	61d3      	str	r3, [r2, #28]
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6193      	str	r3, [r2, #24]
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4619      	mov	r1, r3
 8001982:	4808      	ldr	r0, [pc, #32]	; (80019a4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001984:	f000 fba8 	bl	80020d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	201d      	movs	r0, #29
 800198e:	f000 faba 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001992:	201d      	movs	r0, #29
 8001994:	f000 fad3 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 8001998:	bf00      	nop
 800199a:	3728      	adds	r7, #40	; 0x28
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010800 	.word	0x40010800
 80019a8:	40000400 	.word	0x40000400

080019ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_TIM_MspPostInit+0x5c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d118      	bne.n	80019fe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <HAL_TIM_MspPostInit+0x60>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <HAL_TIM_MspPostInit+0x60>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <HAL_TIM_MspPostInit+0x60>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80019e4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80019e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2302      	movs	r3, #2
 80019f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_TIM_MspPostInit+0x64>)
 80019fa:	f000 fb6d 	bl	80020d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3720      	adds	r7, #32
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010800 	.word	0x40010800

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a20      	ldr	r2, [pc, #128]	; (8001ab0 <HAL_UART_MspInit+0x9c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d139      	bne.n	8001aa8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a3e:	6193      	str	r3, [r2, #24]
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a18      	ldr	r2, [pc, #96]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_UART_MspInit+0xa0>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4619      	mov	r1, r3
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <HAL_UART_MspInit+0xa4>)
 8001a7a:	f000 fb2d 	bl	80020d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4619      	mov	r1, r3
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <HAL_UART_MspInit+0xa4>)
 8001a94:	f000 fb20 	bl	80020d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2025      	movs	r0, #37	; 0x25
 8001a9e:	f000 fa32 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aa2:	2025      	movs	r0, #37	; 0x25
 8001aa4:	f000 fa4b 	bl	8001f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40013800 	.word	0x40013800
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010800 	.word	0x40010800

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
//		sprintf(buff, "%d %d %d %d\n", encoderLeft, encoderRight, speedLeft,
//				speedRight);
//		HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff),
//		HAL_MAX_DELAY);
//	}
	pid_indx++;
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <SysTick_Handler+0x2c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <SysTick_Handler+0x2c>)
 8001b0c:	6013      	str	r3, [r2, #0]
	if (pid_indx == PID_TIME){
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <SysTick_Handler+0x2c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b1e      	cmp	r3, #30
 8001b14:	d106      	bne.n	8001b24 <SysTick_Handler+0x24>
		updatePID(&leftPID, &rightPID);
 8001b16:	4906      	ldr	r1, [pc, #24]	; (8001b30 <SysTick_Handler+0x30>)
 8001b18:	4806      	ldr	r0, [pc, #24]	; (8001b34 <SysTick_Handler+0x34>)
 8001b1a:	f7ff f88f 	bl	8000c3c <updatePID>
		pid_indx = 0;
 8001b1e:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <SysTick_Handler+0x2c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
//		HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff),
//		HAL_MAX_DELAY);
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b24:	f000 f8d8 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000023c 	.word	0x2000023c
 8001b30:	200001c4 	.word	0x200001c4
 8001b34:	2000019c 	.word	0x2000019c

08001b38 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <TIM1_UP_IRQHandler+0x10>)
 8001b3e:	f001 fab9 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	2000007c 	.word	0x2000007c

08001b4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM2_IRQHandler+0x10>)
 8001b52:	f001 faaf 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200000c4 	.word	0x200000c4

08001b60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM3_IRQHandler+0x10>)
 8001b66:	f001 faa5 	bl	80030b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000010c 	.word	0x2000010c

08001b74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <USART1_IRQHandler+0x10>)
 8001b7a:	f002 f851 	bl	8003c20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000154 	.word	0x20000154

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f002 fe92 	bl	80048e0 <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20005000 	.word	0x20005000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	20000240 	.word	0x20000240
 8001bf0:	20000390 	.word	0x20000390

08001bf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c00:	f7ff fff8 	bl	8001bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c04:	480b      	ldr	r0, [pc, #44]	; (8001c34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c06:	490c      	ldr	r1, [pc, #48]	; (8001c38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c08:	4a0c      	ldr	r2, [pc, #48]	; (8001c3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c0c:	e002      	b.n	8001c14 <LoopCopyDataInit>

08001c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c12:	3304      	adds	r3, #4

08001c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c18:	d3f9      	bcc.n	8001c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c1c:	4c09      	ldr	r4, [pc, #36]	; (8001c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c20:	e001      	b.n	8001c26 <LoopFillZerobss>

08001c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c24:	3204      	adds	r2, #4

08001c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c28:	d3fb      	bcc.n	8001c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f002 fe5f 	bl	80048ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c2e:	f7ff fb3d 	bl	80012ac <main>
  bx lr
 8001c32:	4770      	bx	lr
  ldr r0, =_sdata
 8001c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001c3c:	080053c8 	.word	0x080053c8
  ldr r2, =_sbss
 8001c40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001c44:	20000390 	.word	0x20000390

08001c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC1_2_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_Init+0x28>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_Init+0x28>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f947 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff fde0 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022000 	.word	0x40022000

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f95f 	bl	8001f5a <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f000 f927 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_IncTick+0x1c>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_IncTick+0x20>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	20000244 	.word	0x20000244

08001cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <HAL_GetTick+0x10>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr
 8001d0c:	20000244 	.word	0x20000244

08001d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_GetTick>
 8001d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d28:	d005      	beq.n	8001d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_Delay+0x44>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d36:	bf00      	nop
 8001d38:	f7ff ffe0 	bl	8001cfc <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d8f7      	bhi.n	8001d38 <HAL_Delay+0x28>
  {
  }
}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008

08001d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d74:	4013      	ands	r3, r2
 8001d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <__NVIC_SetPriorityGrouping+0x44>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <__NVIC_GetPriorityGrouping+0x18>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	0a1b      	lsrs	r3, r3, #8
 8001daa:	f003 0307 	and.w	r3, r3, #7
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db0b      	blt.n	8001de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	f003 021f 	and.w	r2, r3, #31
 8001dd4:	4906      	ldr	r1, [pc, #24]	; (8001df0 <__NVIC_EnableIRQ+0x34>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	095b      	lsrs	r3, r3, #5
 8001ddc:	2001      	movs	r0, #1
 8001dde:	fa00 f202 	lsl.w	r2, r0, r2
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	; (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	; (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	; 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f1c3 0307 	rsb	r3, r3, #7
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	bf28      	it	cs
 8001e66:	2304      	movcs	r3, #4
 8001e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2b06      	cmp	r3, #6
 8001e70:	d902      	bls.n	8001e78 <NVIC_EncodePriority+0x30>
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3b03      	subs	r3, #3
 8001e76:	e000      	b.n	8001e7a <NVIC_EncodePriority+0x32>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	401a      	ands	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e90:	f04f 31ff 	mov.w	r1, #4294967295
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	4313      	orrs	r3, r2
         );
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff90 	bl	8001df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff2d 	bl	8001d58 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff42 	bl	8001da0 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff90 	bl	8001e48 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5f 	bl	8001df4 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff35 	bl	8001dbc <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b085      	sub	sp, #20
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d008      	beq.n	8001f9c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e020      	b.n	8001fde <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 020e 	bic.w	r2, r2, #14
 8001faa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d005      	beq.n	800200c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2204      	movs	r2, #4
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	e051      	b.n	80020b0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 020e 	bic.w	r2, r2, #14
 800201a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a22      	ldr	r2, [pc, #136]	; (80020bc <HAL_DMA_Abort_IT+0xd4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d029      	beq.n	800208a <HAL_DMA_Abort_IT+0xa2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <HAL_DMA_Abort_IT+0xd8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d022      	beq.n	8002086 <HAL_DMA_Abort_IT+0x9e>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_DMA_Abort_IT+0xdc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01a      	beq.n	8002080 <HAL_DMA_Abort_IT+0x98>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <HAL_DMA_Abort_IT+0xe0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d012      	beq.n	800207a <HAL_DMA_Abort_IT+0x92>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_DMA_Abort_IT+0xe4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00a      	beq.n	8002074 <HAL_DMA_Abort_IT+0x8c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1b      	ldr	r2, [pc, #108]	; (80020d0 <HAL_DMA_Abort_IT+0xe8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d102      	bne.n	800206e <HAL_DMA_Abort_IT+0x86>
 8002068:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800206c:	e00e      	b.n	800208c <HAL_DMA_Abort_IT+0xa4>
 800206e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002072:	e00b      	b.n	800208c <HAL_DMA_Abort_IT+0xa4>
 8002074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002078:	e008      	b.n	800208c <HAL_DMA_Abort_IT+0xa4>
 800207a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800207e:	e005      	b.n	800208c <HAL_DMA_Abort_IT+0xa4>
 8002080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002084:	e002      	b.n	800208c <HAL_DMA_Abort_IT+0xa4>
 8002086:	2310      	movs	r3, #16
 8002088:	e000      	b.n	800208c <HAL_DMA_Abort_IT+0xa4>
 800208a:	2301      	movs	r3, #1
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_DMA_Abort_IT+0xec>)
 800208e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
    } 
  }
  return status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40020008 	.word	0x40020008
 80020c0:	4002001c 	.word	0x4002001c
 80020c4:	40020030 	.word	0x40020030
 80020c8:	40020044 	.word	0x40020044
 80020cc:	40020058 	.word	0x40020058
 80020d0:	4002006c 	.word	0x4002006c
 80020d4:	40020000 	.word	0x40020000

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b08b      	sub	sp, #44	; 0x2c
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ea:	e169      	b.n	80023c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020ec:	2201      	movs	r2, #1
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 8158 	bne.w	80023ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a9a      	ldr	r2, [pc, #616]	; (8002378 <HAL_GPIO_Init+0x2a0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d05e      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002114:	4a98      	ldr	r2, [pc, #608]	; (8002378 <HAL_GPIO_Init+0x2a0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d875      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800211a:	4a98      	ldr	r2, [pc, #608]	; (800237c <HAL_GPIO_Init+0x2a4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d058      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002120:	4a96      	ldr	r2, [pc, #600]	; (800237c <HAL_GPIO_Init+0x2a4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d86f      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002126:	4a96      	ldr	r2, [pc, #600]	; (8002380 <HAL_GPIO_Init+0x2a8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d052      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 800212c:	4a94      	ldr	r2, [pc, #592]	; (8002380 <HAL_GPIO_Init+0x2a8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d869      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002132:	4a94      	ldr	r2, [pc, #592]	; (8002384 <HAL_GPIO_Init+0x2ac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d04c      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002138:	4a92      	ldr	r2, [pc, #584]	; (8002384 <HAL_GPIO_Init+0x2ac>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d863      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800213e:	4a92      	ldr	r2, [pc, #584]	; (8002388 <HAL_GPIO_Init+0x2b0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d046      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002144:	4a90      	ldr	r2, [pc, #576]	; (8002388 <HAL_GPIO_Init+0x2b0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d85d      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800214a:	2b12      	cmp	r3, #18
 800214c:	d82a      	bhi.n	80021a4 <HAL_GPIO_Init+0xcc>
 800214e:	2b12      	cmp	r3, #18
 8002150:	d859      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002152:	a201      	add	r2, pc, #4	; (adr r2, 8002158 <HAL_GPIO_Init+0x80>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	080021d3 	.word	0x080021d3
 800215c:	080021ad 	.word	0x080021ad
 8002160:	080021bf 	.word	0x080021bf
 8002164:	08002201 	.word	0x08002201
 8002168:	08002207 	.word	0x08002207
 800216c:	08002207 	.word	0x08002207
 8002170:	08002207 	.word	0x08002207
 8002174:	08002207 	.word	0x08002207
 8002178:	08002207 	.word	0x08002207
 800217c:	08002207 	.word	0x08002207
 8002180:	08002207 	.word	0x08002207
 8002184:	08002207 	.word	0x08002207
 8002188:	08002207 	.word	0x08002207
 800218c:	08002207 	.word	0x08002207
 8002190:	08002207 	.word	0x08002207
 8002194:	08002207 	.word	0x08002207
 8002198:	08002207 	.word	0x08002207
 800219c:	080021b5 	.word	0x080021b5
 80021a0:	080021c9 	.word	0x080021c9
 80021a4:	4a79      	ldr	r2, [pc, #484]	; (800238c <HAL_GPIO_Init+0x2b4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021aa:	e02c      	b.n	8002206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	623b      	str	r3, [r7, #32]
          break;
 80021b2:	e029      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	3304      	adds	r3, #4
 80021ba:	623b      	str	r3, [r7, #32]
          break;
 80021bc:	e024      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	3308      	adds	r3, #8
 80021c4:	623b      	str	r3, [r7, #32]
          break;
 80021c6:	e01f      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	330c      	adds	r3, #12
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e01a      	b.n	8002208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021da:	2304      	movs	r3, #4
 80021dc:	623b      	str	r3, [r7, #32]
          break;
 80021de:	e013      	b.n	8002208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e8:	2308      	movs	r3, #8
 80021ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	611a      	str	r2, [r3, #16]
          break;
 80021f2:	e009      	b.n	8002208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f4:	2308      	movs	r3, #8
 80021f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	615a      	str	r2, [r3, #20]
          break;
 80021fe:	e003      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
          break;
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x130>
          break;
 8002206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2bff      	cmp	r3, #255	; 0xff
 800220c:	d801      	bhi.n	8002212 <HAL_GPIO_Init+0x13a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_Init+0x13e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2bff      	cmp	r3, #255	; 0xff
 800221c:	d802      	bhi.n	8002224 <HAL_GPIO_Init+0x14c>
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	e002      	b.n	800222a <HAL_GPIO_Init+0x152>
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	3b08      	subs	r3, #8
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	210f      	movs	r1, #15
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	6a39      	ldr	r1, [r7, #32]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	431a      	orrs	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80b1 	beq.w	80023ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002258:	4b4d      	ldr	r3, [pc, #308]	; (8002390 <HAL_GPIO_Init+0x2b8>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_GPIO_Init+0x2b8>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b4a      	ldr	r3, [pc, #296]	; (8002390 <HAL_GPIO_Init+0x2b8>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002270:	4a48      	ldr	r2, [pc, #288]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a40      	ldr	r2, [pc, #256]	; (8002398 <HAL_GPIO_Init+0x2c0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_Init+0x1ec>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3f      	ldr	r2, [pc, #252]	; (800239c <HAL_GPIO_Init+0x2c4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_GPIO_Init+0x1e8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3e      	ldr	r2, [pc, #248]	; (80023a0 <HAL_GPIO_Init+0x2c8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x1e4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a3d      	ldr	r2, [pc, #244]	; (80023a4 <HAL_GPIO_Init+0x2cc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_GPIO_Init+0x1e0>
 80022b4:	2303      	movs	r3, #3
 80022b6:	e006      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e004      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022bc:	2302      	movs	r3, #2
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022c4:	2300      	movs	r3, #0
 80022c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c8:	f002 0203 	and.w	r2, r2, #3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4093      	lsls	r3, r2
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022d6:	492f      	ldr	r1, [pc, #188]	; (8002394 <HAL_GPIO_Init+0x2bc>)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	492c      	ldr	r1, [pc, #176]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	43db      	mvns	r3, r3
 8002306:	4928      	ldr	r1, [pc, #160]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002308:	4013      	ands	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4922      	ldr	r1, [pc, #136]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	60cb      	str	r3, [r1, #12]
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	43db      	mvns	r3, r3
 800232e:	491e      	ldr	r1, [pc, #120]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002330:	4013      	ands	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4918      	ldr	r1, [pc, #96]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4914      	ldr	r1, [pc, #80]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d021      	beq.n	80023ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	e021      	b.n	80023ba <HAL_GPIO_Init+0x2e2>
 8002376:	bf00      	nop
 8002378:	10320000 	.word	0x10320000
 800237c:	10310000 	.word	0x10310000
 8002380:	10220000 	.word	0x10220000
 8002384:	10210000 	.word	0x10210000
 8002388:	10120000 	.word	0x10120000
 800238c:	10110000 	.word	0x10110000
 8002390:	40021000 	.word	0x40021000
 8002394:	40010000 	.word	0x40010000
 8002398:	40010800 	.word	0x40010800
 800239c:	40010c00 	.word	0x40010c00
 80023a0:	40011000 	.word	0x40011000
 80023a4:	40011400 	.word	0x40011400
 80023a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_GPIO_Init+0x304>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	4909      	ldr	r1, [pc, #36]	; (80023dc <HAL_GPIO_Init+0x304>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f ae8e 	bne.w	80020ec <HAL_GPIO_Init+0x14>
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	372c      	adds	r7, #44	; 0x2c
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
 80023ec:	4613      	mov	r3, r2
 80023ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f0:	787b      	ldrb	r3, [r7, #1]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023fc:	e003      	b.n	8002406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	041a      	lsls	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e272      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8087 	beq.w	800253e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d00c      	beq.n	8002456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d112      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
 8002448:	4b8c      	ldr	r3, [pc, #560]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d06c      	beq.n	800253c <HAL_RCC_OscConfig+0x12c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d168      	bne.n	800253c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e24c      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x76>
 8002478:	4b80      	ldr	r3, [pc, #512]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7f      	ldr	r2, [pc, #508]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e02e      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b78      	ldr	r3, [pc, #480]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0xbc>
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a71      	ldr	r2, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024cc:	4b6b      	ldr	r3, [pc, #428]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a67      	ldr	r2, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fc06 	bl	8001cfc <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff fc02 	bl	8001cfc <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e200      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe4>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff fbf2 	bl	8001cfc <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff fbee 	bl	8001cfc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1ec      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x10c>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254a:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002556:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
 8002562:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1c0      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4939      	ldr	r1, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fba7 	bl	8001cfc <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff fba3 	bl	8001cfc <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1a1      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb86 	bl	8001cfc <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff fb82 	bl	8001cfc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e180      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03a      	beq.n	8002694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff fb66 	bl	8001cfc <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fb62 	bl	8001cfc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e160      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002652:	2001      	movs	r0, #1
 8002654:	f000 face 	bl	8002bf4 <RCC_Delay>
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7ff fb4c 	bl	8001cfc <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002666:	e00f      	b.n	8002688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff fb48 	bl	8001cfc <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d908      	bls.n	8002688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e146      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	42420000 	.word	0x42420000
 8002684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e9      	bne.n	8002668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a6 	beq.w	80027ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b8b      	ldr	r3, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a87      	ldr	r2, [pc, #540]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b82      	ldr	r3, [pc, #520]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7e      	ldr	r2, [pc, #504]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7ff fb09 	bl	8001cfc <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7ff fb05 	bl	8001cfc <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e103      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b75      	ldr	r3, [pc, #468]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x312>
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	e02d      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x334>
 800272a:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a69      	ldr	r2, [pc, #420]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a66      	ldr	r2, [pc, #408]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	e01c      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x356>
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a60      	ldr	r2, [pc, #384]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a5d      	ldr	r2, [pc, #372]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002766:	4b5b      	ldr	r3, [pc, #364]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a5a      	ldr	r2, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b58      	ldr	r3, [pc, #352]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a57      	ldr	r2, [pc, #348]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff fab9 	bl	8001cfc <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff fab5 	bl	8001cfc <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0b1      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x37e>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff faa3 	bl	8001cfc <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7ff fa9f 	bl	8001cfc <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e09b      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8087 	beq.w	8002906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d061      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d146      	bne.n	800289a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b33      	ldr	r3, [pc, #204]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7ff fa73 	bl	8001cfc <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7ff fa6f 	bl	8001cfc <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e06d      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4921      	ldr	r1, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a19      	ldr	r1, [r3, #32]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	430b      	orrs	r3, r1
 8002866:	491b      	ldr	r1, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7ff fa43 	bl	8001cfc <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7ff fa3f 	bl	8001cfc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x46a>
 8002898:	e035      	b.n	8002906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff fa2c 	bl	8001cfc <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7ff fa28 	bl	8001cfc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e026      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x498>
 80028c6:	e01e      	b.n	8002906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e019      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x500>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0d0      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4965      	ldr	r1, [pc, #404]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b8      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800297a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494d      	ldr	r1, [pc, #308]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d040      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e073      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06b      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4936      	ldr	r1, [pc, #216]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7ff f97a 	bl	8001cfc <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7ff f976 	bl	8001cfc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e053      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d210      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e032      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4916      	ldr	r1, [pc, #88]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f821 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490a      	ldr	r1, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f8d8 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08005260 	.word	0x08005260
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000004 	.word	0x20000004

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b02:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x30>
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x36>
 8002b16:	e027      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1a:	613b      	str	r3, [r7, #16]
      break;
 8002b1c:	e027      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	0c9b      	lsrs	r3, r3, #18
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d010      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	0c5b      	lsrs	r3, r3, #17
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	fb03 f202 	mul.w	r2, r3, r2
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e004      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	613b      	str	r3, [r7, #16]
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b6a:	613b      	str	r3, [r7, #16]
      break;
 8002b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6e:	693b      	ldr	r3, [r7, #16]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	007a1200 	.word	0x007a1200
 8002b84:	08005278 	.word	0x08005278
 8002b88:	08005288 	.word	0x08005288
 8002b8c:	003d0900 	.word	0x003d0900

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	20000000 	.word	0x20000000

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff2 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08005270 	.word	0x08005270

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0adb      	lsrs	r3, r3, #11
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08005270 	.word	0x08005270

08002bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <RCC_Delay+0x34>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <RCC_Delay+0x38>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0a5b      	lsrs	r3, r3, #9
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c10:	bf00      	nop
  }
  while (Delay --);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	60fa      	str	r2, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f9      	bne.n	8002c10 <RCC_Delay+0x1c>
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	10624dd3 	.word	0x10624dd3

08002c30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e041      	b.n	8002cc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fe0a 	bl	8001870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 fc0e 	bl	8003490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_TIM_PWM_Start+0x24>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	bf14      	ite	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	2300      	moveq	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e022      	b.n	8002d3a <HAL_TIM_PWM_Start+0x6a>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d109      	bne.n	8002d0e <HAL_TIM_PWM_Start+0x3e>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	e015      	b.n	8002d3a <HAL_TIM_PWM_Start+0x6a>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d109      	bne.n	8002d28 <HAL_TIM_PWM_Start+0x58>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	bf14      	ite	ne
 8002d20:	2301      	movne	r3, #1
 8002d22:	2300      	moveq	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	e008      	b.n	8002d3a <HAL_TIM_PWM_Start+0x6a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	bf14      	ite	ne
 8002d34:	2301      	movne	r3, #1
 8002d36:	2300      	moveq	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e05e      	b.n	8002e00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d104      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x82>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d50:	e013      	b.n	8002d7a <HAL_TIM_PWM_Start+0xaa>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x92>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d60:	e00b      	b.n	8002d7a <HAL_TIM_PWM_Start+0xaa>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_PWM_Start+0xa2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d70:	e003      	b.n	8002d7a <HAL_TIM_PWM_Start+0xaa>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	6839      	ldr	r1, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fd6e 	bl	8003864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <HAL_TIM_PWM_Start+0x138>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d107      	bne.n	8002da2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <HAL_TIM_PWM_Start+0x138>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00e      	beq.n	8002dca <HAL_TIM_PWM_Start+0xfa>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db4:	d009      	beq.n	8002dca <HAL_TIM_PWM_Start+0xfa>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a14      	ldr	r2, [pc, #80]	; (8002e0c <HAL_TIM_PWM_Start+0x13c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d004      	beq.n	8002dca <HAL_TIM_PWM_Start+0xfa>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_TIM_PWM_Start+0x140>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d111      	bne.n	8002dee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2b06      	cmp	r3, #6
 8002dda:	d010      	beq.n	8002dfe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	e007      	b.n	8002dfe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f042 0201 	orr.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400
 8002e10:	40000800 	.word	0x40000800

08002e14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e093      	b.n	8002f50 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fe fd3d 	bl	80018bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e58:	f023 0307 	bic.w	r3, r3, #7
 8002e5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f000 fb11 	bl	8003490 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002eb4:	f023 030c 	bic.w	r3, r3, #12
 8002eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	011a      	lsls	r2, r3, #4
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	031b      	lsls	r3, r3, #12
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	4313      	orrs	r3, r2
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d110      	bne.n	8002faa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f8e:	7b7b      	ldrb	r3, [r7, #13]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d001      	beq.n	8002f98 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e089      	b.n	80030ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa8:	e031      	b.n	800300e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d110      	bne.n	8002fd2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fb0:	7bbb      	ldrb	r3, [r7, #14]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fb6:	7b3b      	ldrb	r3, [r7, #12]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d001      	beq.n	8002fc0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e075      	b.n	80030ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fd0:	e01d      	b.n	800300e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d108      	bne.n	8002fea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fd8:	7bbb      	ldrb	r3, [r7, #14]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d105      	bne.n	8002fea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fde:	7b7b      	ldrb	r3, [r7, #13]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d102      	bne.n	8002fea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fe4:	7b3b      	ldrb	r3, [r7, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d001      	beq.n	8002fee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e05e      	b.n	80030ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	2b04      	cmp	r3, #4
 8003018:	d010      	beq.n	800303c <HAL_TIM_Encoder_Start_IT+0xe4>
 800301a:	e01f      	b.n	800305c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2201      	movs	r2, #1
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fc1d 	bl	8003864 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0202 	orr.w	r2, r2, #2
 8003038:	60da      	str	r2, [r3, #12]
      break;
 800303a:	e02e      	b.n	800309a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2201      	movs	r2, #1
 8003042:	2104      	movs	r1, #4
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fc0d 	bl	8003864 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0204 	orr.w	r2, r2, #4
 8003058:	60da      	str	r2, [r3, #12]
      break;
 800305a:	e01e      	b.n	800309a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fbfd 	bl	8003864 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	2104      	movs	r1, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fbf6 	bl	8003864 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0202 	orr.w	r2, r2, #2
 8003086:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0204 	orr.w	r2, r2, #4
 8003096:	60da      	str	r2, [r3, #12]
      break;
 8003098:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0202 	mvn.w	r2, #2
 80030e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fdf8 	bl	8000cec <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9ab 	bl	800345a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f9b1 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b04      	cmp	r3, #4
 800311c:	d122      	bne.n	8003164 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b04      	cmp	r3, #4
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0204 	mvn.w	r2, #4
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fdce 	bl	8000cec <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f981 	bl	800345a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f987 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b08      	cmp	r3, #8
 8003170:	d122      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	2b08      	cmp	r3, #8
 800317e:	d11b      	bne.n	80031b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0208 	mvn.w	r2, #8
 8003188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2204      	movs	r2, #4
 800318e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7fd fda4 	bl	8000cec <HAL_TIM_IC_CaptureCallback>
 80031a4:	e005      	b.n	80031b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f957 	bl	800345a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f95d 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d122      	bne.n	800320c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d11b      	bne.n	800320c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0210 	mvn.w	r2, #16
 80031dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2208      	movs	r2, #8
 80031e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd fd7a 	bl	8000cec <HAL_TIM_IC_CaptureCallback>
 80031f8:	e005      	b.n	8003206 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f92d 	bl	800345a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f933 	bl	800346c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10e      	bne.n	8003238 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	2b01      	cmp	r3, #1
 8003226:	d107      	bne.n	8003238 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0201 	mvn.w	r2, #1
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f908 	bl	8003448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003250:	2b80      	cmp	r3, #128	; 0x80
 8003252:	d107      	bne.n	8003264 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fbdc 	bl	8003a1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d10e      	bne.n	8003290 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d107      	bne.n	8003290 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8f7 	bl	800347e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d10e      	bne.n	80032bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0320 	and.w	r3, r3, #32
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d107      	bne.n	80032bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f06f 0220 	mvn.w	r2, #32
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fba7 	bl	8003a0a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0ae      	b.n	8003440 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	f200 809f 	bhi.w	8003430 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	08003431 	.word	0x08003431
 8003300:	08003431 	.word	0x08003431
 8003304:	08003431 	.word	0x08003431
 8003308:	0800336d 	.word	0x0800336d
 800330c:	08003431 	.word	0x08003431
 8003310:	08003431 	.word	0x08003431
 8003314:	08003431 	.word	0x08003431
 8003318:	080033af 	.word	0x080033af
 800331c:	08003431 	.word	0x08003431
 8003320:	08003431 	.word	0x08003431
 8003324:	08003431 	.word	0x08003431
 8003328:	080033ef 	.word	0x080033ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f90e 	bl	8003554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0208 	orr.w	r2, r2, #8
 8003346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0204 	bic.w	r2, r2, #4
 8003356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6999      	ldr	r1, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	691a      	ldr	r2, [r3, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	619a      	str	r2, [r3, #24]
      break;
 800336a:	e064      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68b9      	ldr	r1, [r7, #8]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f954 	bl	8003620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6999      	ldr	r1, [r3, #24]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	021a      	lsls	r2, r3, #8
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	619a      	str	r2, [r3, #24]
      break;
 80033ac:	e043      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f99d 	bl	80036f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0208 	orr.w	r2, r2, #8
 80033c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69da      	ldr	r2, [r3, #28]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 0204 	bic.w	r2, r2, #4
 80033d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	69d9      	ldr	r1, [r3, #28]
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	61da      	str	r2, [r3, #28]
      break;
 80033ec:	e023      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68b9      	ldr	r1, [r7, #8]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f9e7 	bl	80037c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69da      	ldr	r2, [r3, #28]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69d9      	ldr	r1, [r3, #28]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	021a      	lsls	r2, r3, #8
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	61da      	str	r2, [r3, #28]
      break;
 800342e:	e002      	b.n	8003436 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	75fb      	strb	r3, [r7, #23]
      break;
 8003434:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a29      	ldr	r2, [pc, #164]	; (8003548 <TIM_Base_SetConfig+0xb8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <TIM_Base_SetConfig+0x30>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ae:	d007      	beq.n	80034c0 <TIM_Base_SetConfig+0x30>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a26      	ldr	r2, [pc, #152]	; (800354c <TIM_Base_SetConfig+0xbc>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0x30>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <TIM_Base_SetConfig+0xc0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d108      	bne.n	80034d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <TIM_Base_SetConfig+0xb8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0x62>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0x62>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a19      	ldr	r2, [pc, #100]	; (800354c <TIM_Base_SetConfig+0xbc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0x62>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <TIM_Base_SetConfig+0xc0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a07      	ldr	r2, [pc, #28]	; (8003548 <TIM_Base_SetConfig+0xb8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d103      	bne.n	8003538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	615a      	str	r2, [r3, #20]
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	40012c00 	.word	0x40012c00
 800354c:	40000400 	.word	0x40000400
 8003550:	40000800 	.word	0x40000800

08003554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b480      	push	{r7}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f023 0201 	bic.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f023 0302 	bic.w	r3, r3, #2
 800359c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a1c      	ldr	r2, [pc, #112]	; (800361c <TIM_OC1_SetConfig+0xc8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10c      	bne.n	80035ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f023 0308 	bic.w	r3, r3, #8
 80035b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f023 0304 	bic.w	r3, r3, #4
 80035c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a13      	ldr	r2, [pc, #76]	; (800361c <TIM_OC1_SetConfig+0xc8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d111      	bne.n	80035f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	621a      	str	r2, [r3, #32]
}
 8003610:	bf00      	nop
 8003612:	371c      	adds	r7, #28
 8003614:	46bd      	mov	sp, r7
 8003616:	bc80      	pop	{r7}
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40012c00 	.word	0x40012c00

08003620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	f023 0210 	bic.w	r2, r3, #16
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800364e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	021b      	lsls	r3, r3, #8
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0320 	bic.w	r3, r3, #32
 800366a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a1d      	ldr	r2, [pc, #116]	; (80036f0 <TIM_OC2_SetConfig+0xd0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10d      	bne.n	800369c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800369a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <TIM_OC2_SetConfig+0xd0>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d113      	bne.n	80036cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	bf00      	nop
 80036e8:	371c      	adds	r7, #28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00

080036f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800373c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <TIM_OC3_SetConfig+0xd0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10d      	bne.n	800376e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800376c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <TIM_OC3_SetConfig+0xd0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d113      	bne.n	800379e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00

080037c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	031b      	lsls	r3, r3, #12
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0f      	ldr	r2, [pc, #60]	; (8003860 <TIM_OC4_SetConfig+0x98>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d109      	bne.n	800383c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800382e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	621a      	str	r2, [r3, #32]
}
 8003856:	bf00      	nop
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr
 8003860:	40012c00 	.word	0x40012c00

08003864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	f003 031f 	and.w	r3, r3, #31
 8003876:	2201      	movs	r2, #1
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	43db      	mvns	r3, r3
 8003886:	401a      	ands	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1a      	ldr	r2, [r3, #32]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 031f 	and.w	r3, r3, #31
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	431a      	orrs	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e046      	b.n	8003952 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a16      	ldr	r2, [pc, #88]	; (800395c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00e      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003910:	d009      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a10      	ldr	r2, [pc, #64]	; (8003964 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d10c      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800392c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800

08003968 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003980:	2302      	movs	r3, #2
 8003982:	e03d      	b.n	8003a00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr

08003a0a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr

08003a1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e042      	b.n	8003ac6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7fd ffdd 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2224      	movs	r2, #36	; 0x24
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a70:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fdc6 	bl	8004604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a86:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a96:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aa6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b08a      	sub	sp, #40	; 0x28
 8003ad2:	af02      	add	r7, sp, #8
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	603b      	str	r3, [r7, #0]
 8003ada:	4613      	mov	r3, r2
 8003adc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b20      	cmp	r3, #32
 8003aec:	d16d      	bne.n	8003bca <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <HAL_UART_Transmit+0x2c>
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e066      	b.n	8003bcc <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2221      	movs	r2, #33	; 0x21
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe f8f6 	bl	8001cfc <HAL_GetTick>
 8003b10:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	88fa      	ldrh	r2, [r7, #6]
 8003b16:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	88fa      	ldrh	r2, [r7, #6]
 8003b1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b26:	d108      	bne.n	8003b3a <HAL_UART_Transmit+0x6c>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	e003      	b.n	8003b42 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b42:	e02a      	b.n	8003b9a <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fb15 	bl	800417e <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e036      	b.n	8003bcc <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	3302      	adds	r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]
 8003b7a:	e007      	b.n	8003b8c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1cf      	bne.n	8003b44 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2200      	movs	r2, #0
 8003bac:	2140      	movs	r1, #64	; 0x40
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fae5 	bl	800417e <UART_WaitOnFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e006      	b.n	8003bcc <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3720      	adds	r7, #32
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	4613      	mov	r3, r2
 8003be0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b20      	cmp	r3, #32
 8003bec:	d112      	bne.n	8003c14 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_UART_Receive_IT+0x26>
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00b      	b.n	8003c16 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	461a      	mov	r2, r3
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fb25 	bl	800425a <UART_Start_Receive_IT>
 8003c10:	4603      	mov	r3, r0
 8003c12:	e000      	b.n	8003c16 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b0ba      	sub	sp, #232	; 0xe8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_UART_IRQHandler+0x66>
 8003c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fc01 	bl	8004486 <UART_Receive_IT>
      return;
 8003c84:	e25b      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 80de 	beq.w	8003e4c <HAL_UART_IRQHandler+0x22c>
 8003c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d106      	bne.n	8003caa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80d1 	beq.w	8003e4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_UART_IRQHandler+0xae>
 8003cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xd2>
 8003cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f043 0202 	orr.w	r2, r3, #2
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <HAL_UART_IRQHandler+0xf6>
 8003cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	f043 0204 	orr.w	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d011      	beq.n	8003d46 <HAL_UART_IRQHandler+0x126>
 8003d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f043 0208 	orr.w	r2, r3, #8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 81f2 	beq.w	8004134 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <HAL_UART_IRQHandler+0x14e>
 8003d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb8c 	bl	8004486 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <HAL_UART_IRQHandler+0x17a>
 8003d92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d04f      	beq.n	8003e3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fa96 	bl	80042cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d041      	beq.n	8003e32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1d9      	bne.n	8003dae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d013      	beq.n	8003e2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	4a7e      	ldr	r2, [pc, #504]	; (8004000 <HAL_UART_IRQHandler+0x3e0>)
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fe f8ea 	bl	8001fe8 <HAL_DMA_Abort_IT>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d016      	beq.n	8003e48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e24:	4610      	mov	r0, r2
 8003e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e28:	e00e      	b.n	8003e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f993 	bl	8004156 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	e00a      	b.n	8003e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f98f 	bl	8004156 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e006      	b.n	8003e48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f98b 	bl	8004156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003e46:	e175      	b.n	8004134 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	bf00      	nop
    return;
 8003e4a:	e173      	b.n	8004134 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 814f 	bne.w	80040f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8148 	beq.w	80040f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8141 	beq.w	80040f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 80b6 	beq.w	8004004 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ea4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8145 	beq.w	8004138 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	f080 813e 	bcs.w	8004138 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	f000 8088 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eda:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	330c      	adds	r3, #12
 8003ef8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003efc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f04:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1d9      	bne.n	8003ed0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3314      	adds	r3, #20
 8003f22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2e:	f023 0301 	bic.w	r3, r3, #1
 8003f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3314      	adds	r3, #20
 8003f3c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f40:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f44:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f48:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e1      	bne.n	8003f1c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3314      	adds	r3, #20
 8003f78:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f7e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f80:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f82:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f84:	e841 2300 	strex	r3, r2, [r1]
 8003f88:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1e3      	bne.n	8003f58 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
 8003fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fc2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fc4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e3      	bne.n	8003f9e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd ffc9 	bl	8001f72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8b6 	bl	8004168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ffc:	e09c      	b.n	8004138 <HAL_UART_IRQHandler+0x518>
 8003ffe:	bf00      	nop
 8004000:	08004391 	.word	0x08004391
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800400c:	b29b      	uxth	r3, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 808e 	beq.w	800413c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8089 	beq.w	800413c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004034:	e853 3f00 	ldrex	r3, [r3]
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	330c      	adds	r3, #12
 800404a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800404e:	647a      	str	r2, [r7, #68]	; 0x44
 8004050:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e3      	bne.n	800402a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3314      	adds	r3, #20
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	623b      	str	r3, [r7, #32]
   return(result);
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3314      	adds	r3, #20
 8004082:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004086:	633a      	str	r2, [r7, #48]	; 0x30
 8004088:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800408c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e3      	bne.n	8004062 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0310 	bic.w	r3, r3, #16
 80040be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040cc:	61fa      	str	r2, [r7, #28]
 80040ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	69b9      	ldr	r1, [r7, #24]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	617b      	str	r3, [r7, #20]
   return(result);
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e3      	bne.n	80040a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f83b 	bl	8004168 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040f2:	e023      	b.n	800413c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d009      	beq.n	8004114 <HAL_UART_IRQHandler+0x4f4>
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f953 	bl	80043b8 <UART_Transmit_IT>
    return;
 8004112:	e014      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <HAL_UART_IRQHandler+0x51e>
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d008      	beq.n	800413e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f992 	bl	8004456 <UART_EndTransmit_IT>
    return;
 8004132:	e004      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
    return;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
      return;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <HAL_UART_IRQHandler+0x51e>
      return;
 800413c:	bf00      	nop
  }
}
 800413e:	37e8      	adds	r7, #232	; 0xe8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b090      	sub	sp, #64	; 0x40
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800418e:	e050      	b.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d04c      	beq.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800419a:	2b00      	cmp	r3, #0
 800419c:	d007      	beq.n	80041ae <UART_WaitOnFlagUntilTimeout+0x30>
 800419e:	f7fd fdad 	bl	8001cfc <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d241      	bcs.n	8004232 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041ce:	637a      	str	r2, [r7, #52]	; 0x34
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e5      	bne.n	80041ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	3314      	adds	r3, #20
 80041e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	e853 3f00 	ldrex	r3, [r3]
 80041f0:	613b      	str	r3, [r7, #16]
   return(result);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3314      	adds	r3, #20
 8004200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004202:	623a      	str	r2, [r7, #32]
 8004204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	69f9      	ldr	r1, [r7, #28]
 8004208:	6a3a      	ldr	r2, [r7, #32]
 800420a:	e841 2300 	strex	r3, r2, [r1]
 800420e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1e5      	bne.n	80041e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e00f      	b.n	8004252 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4013      	ands	r3, r2
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	bf0c      	ite	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	2300      	movne	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d09f      	beq.n	8004190 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3740      	adds	r7, #64	; 0x40
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	4613      	mov	r3, r2
 8004266:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2222      	movs	r2, #34	; 0x22
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0220 	orr.w	r2, r2, #32
 80042be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b095      	sub	sp, #84	; 0x54
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	330c      	adds	r3, #12
 80042da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042f4:	643a      	str	r2, [r7, #64]	; 0x40
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e5      	bne.n	80042d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3314      	adds	r3, #20
 800430e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	61fb      	str	r3, [r7, #28]
   return(result);
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3314      	adds	r3, #20
 8004326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004328:	62fa      	str	r2, [r7, #44]	; 0x2c
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800432e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e5      	bne.n	8004308 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	2b01      	cmp	r3, #1
 8004342:	d119      	bne.n	8004378 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	60bb      	str	r3, [r7, #8]
   return(result);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f023 0310 	bic.w	r3, r3, #16
 800435a:	647b      	str	r3, [r7, #68]	; 0x44
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004364:	61ba      	str	r2, [r7, #24]
 8004366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6979      	ldr	r1, [r7, #20]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	613b      	str	r3, [r7, #16]
   return(result);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004386:	bf00      	nop
 8004388:	3754      	adds	r7, #84	; 0x54
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff fed3 	bl	8004156 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b21      	cmp	r3, #33	; 0x21
 80043ca:	d13e      	bne.n	800444a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d4:	d114      	bne.n	8004400 <UART_Transmit_IT+0x48>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d110      	bne.n	8004400 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	881b      	ldrh	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	1c9a      	adds	r2, r3, #2
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]
 80043fe:	e008      	b.n	8004412 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	1c59      	adds	r1, r3, #1
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6211      	str	r1, [r2, #32]
 800440a:	781a      	ldrb	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29b      	uxth	r3, r3
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4619      	mov	r1, r3
 8004420:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10f      	bne.n	8004446 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004434:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004444:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	e000      	b.n	800444c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800444a:	2302      	movs	r3, #2
  }
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800446c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7ff fe64 	bl	8004144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b08c      	sub	sp, #48	; 0x30
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b22      	cmp	r3, #34	; 0x22
 8004498:	f040 80ae 	bne.w	80045f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a4:	d117      	bne.n	80044d6 <UART_Receive_IT+0x50>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d113      	bne.n	80044d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	629a      	str	r2, [r3, #40]	; 0x28
 80044d4:	e026      	b.n	8004524 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80044dc:	2300      	movs	r3, #0
 80044de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e8:	d007      	beq.n	80044fa <UART_Receive_IT+0x74>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <UART_Receive_IT+0x82>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	b2da      	uxtb	r2, r3
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e008      	b.n	800451a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004514:	b2da      	uxtb	r2, r3
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29b      	uxth	r3, r3
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4619      	mov	r1, r3
 8004532:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004534:	2b00      	cmp	r3, #0
 8004536:	d15d      	bne.n	80045f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0220 	bic.w	r2, r2, #32
 8004546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	2b01      	cmp	r3, #1
 800457c:	d135      	bne.n	80045ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	330c      	adds	r3, #12
 800458a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	e853 3f00 	ldrex	r3, [r3]
 8004592:	613b      	str	r3, [r7, #16]
   return(result);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f023 0310 	bic.w	r3, r3, #16
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a4:	623a      	str	r2, [r7, #32]
 80045a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a8:	69f9      	ldr	r1, [r7, #28]
 80045aa:	6a3a      	ldr	r2, [r7, #32]
 80045ac:	e841 2300 	strex	r3, r2, [r1]
 80045b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1e5      	bne.n	8004584 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b10      	cmp	r3, #16
 80045c4:	d10a      	bne.n	80045dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fdc0 	bl	8004168 <HAL_UARTEx_RxEventCallback>
 80045e8:	e002      	b.n	80045f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fba2 	bl	8000d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e002      	b.n	80045fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045f4:	2300      	movs	r3, #0
 80045f6:	e000      	b.n	80045fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
  }
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3730      	adds	r7, #48	; 0x30
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800463e:	f023 030c 	bic.w	r3, r3, #12
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6812      	ldr	r2, [r2, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	430b      	orrs	r3, r1
 800464a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	430a      	orrs	r2, r1
 8004660:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2c      	ldr	r2, [pc, #176]	; (8004718 <UART_SetConfig+0x114>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d103      	bne.n	8004674 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fe faae 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	e002      	b.n	800467a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004674:	f7fe fa96 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 8004678:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009a      	lsls	r2, r3, #2
 8004684:	441a      	add	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <UART_SetConfig+0x118>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	0119      	lsls	r1, r3, #4
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b0:	4b1a      	ldr	r3, [pc, #104]	; (800471c <UART_SetConfig+0x118>)
 80046b2:	fba3 0302 	umull	r0, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2064      	movs	r0, #100	; 0x64
 80046ba:	fb00 f303 	mul.w	r3, r0, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	3332      	adds	r3, #50	; 0x32
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <UART_SetConfig+0x118>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d0:	4419      	add	r1, r3
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4613      	mov	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4413      	add	r3, r2
 80046da:	009a      	lsls	r2, r3, #2
 80046dc:	441a      	add	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <UART_SetConfig+0x118>)
 80046ea:	fba3 0302 	umull	r0, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2064      	movs	r0, #100	; 0x64
 80046f2:	fb00 f303 	mul.w	r3, r0, r3
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	3332      	adds	r3, #50	; 0x32
 80046fc:	4a07      	ldr	r2, [pc, #28]	; (800471c <UART_SetConfig+0x118>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	f003 020f 	and.w	r2, r3, #15
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	440a      	add	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40013800 	.word	0x40013800
 800471c:	51eb851f 	.word	0x51eb851f

08004720 <atoi>:
 8004720:	220a      	movs	r2, #10
 8004722:	2100      	movs	r1, #0
 8004724:	f000 b87e 	b.w	8004824 <strtol>

08004728 <_strtol_l.constprop.0>:
 8004728:	2b01      	cmp	r3, #1
 800472a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472e:	4686      	mov	lr, r0
 8004730:	4690      	mov	r8, r2
 8004732:	d001      	beq.n	8004738 <_strtol_l.constprop.0+0x10>
 8004734:	2b24      	cmp	r3, #36	; 0x24
 8004736:	d906      	bls.n	8004746 <_strtol_l.constprop.0+0x1e>
 8004738:	f000 f8d2 	bl	80048e0 <__errno>
 800473c:	2316      	movs	r3, #22
 800473e:	6003      	str	r3, [r0, #0]
 8004740:	2000      	movs	r0, #0
 8004742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004746:	460d      	mov	r5, r1
 8004748:	4835      	ldr	r0, [pc, #212]	; (8004820 <_strtol_l.constprop.0+0xf8>)
 800474a:	462a      	mov	r2, r5
 800474c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004750:	5d06      	ldrb	r6, [r0, r4]
 8004752:	f016 0608 	ands.w	r6, r6, #8
 8004756:	d1f8      	bne.n	800474a <_strtol_l.constprop.0+0x22>
 8004758:	2c2d      	cmp	r4, #45	; 0x2d
 800475a:	d12e      	bne.n	80047ba <_strtol_l.constprop.0+0x92>
 800475c:	2601      	movs	r6, #1
 800475e:	782c      	ldrb	r4, [r5, #0]
 8004760:	1c95      	adds	r5, r2, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d057      	beq.n	8004816 <_strtol_l.constprop.0+0xee>
 8004766:	2b10      	cmp	r3, #16
 8004768:	d109      	bne.n	800477e <_strtol_l.constprop.0+0x56>
 800476a:	2c30      	cmp	r4, #48	; 0x30
 800476c:	d107      	bne.n	800477e <_strtol_l.constprop.0+0x56>
 800476e:	782a      	ldrb	r2, [r5, #0]
 8004770:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004774:	2a58      	cmp	r2, #88	; 0x58
 8004776:	d149      	bne.n	800480c <_strtol_l.constprop.0+0xe4>
 8004778:	2310      	movs	r3, #16
 800477a:	786c      	ldrb	r4, [r5, #1]
 800477c:	3502      	adds	r5, #2
 800477e:	2200      	movs	r2, #0
 8004780:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8004784:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004788:	fbbc f9f3 	udiv	r9, ip, r3
 800478c:	4610      	mov	r0, r2
 800478e:	fb03 ca19 	mls	sl, r3, r9, ip
 8004792:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004796:	2f09      	cmp	r7, #9
 8004798:	d814      	bhi.n	80047c4 <_strtol_l.constprop.0+0x9c>
 800479a:	463c      	mov	r4, r7
 800479c:	42a3      	cmp	r3, r4
 800479e:	dd20      	ble.n	80047e2 <_strtol_l.constprop.0+0xba>
 80047a0:	1c57      	adds	r7, r2, #1
 80047a2:	d007      	beq.n	80047b4 <_strtol_l.constprop.0+0x8c>
 80047a4:	4581      	cmp	r9, r0
 80047a6:	d319      	bcc.n	80047dc <_strtol_l.constprop.0+0xb4>
 80047a8:	d101      	bne.n	80047ae <_strtol_l.constprop.0+0x86>
 80047aa:	45a2      	cmp	sl, r4
 80047ac:	db16      	blt.n	80047dc <_strtol_l.constprop.0+0xb4>
 80047ae:	2201      	movs	r2, #1
 80047b0:	fb00 4003 	mla	r0, r0, r3, r4
 80047b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80047b8:	e7eb      	b.n	8004792 <_strtol_l.constprop.0+0x6a>
 80047ba:	2c2b      	cmp	r4, #43	; 0x2b
 80047bc:	bf04      	itt	eq
 80047be:	782c      	ldrbeq	r4, [r5, #0]
 80047c0:	1c95      	addeq	r5, r2, #2
 80047c2:	e7ce      	b.n	8004762 <_strtol_l.constprop.0+0x3a>
 80047c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80047c8:	2f19      	cmp	r7, #25
 80047ca:	d801      	bhi.n	80047d0 <_strtol_l.constprop.0+0xa8>
 80047cc:	3c37      	subs	r4, #55	; 0x37
 80047ce:	e7e5      	b.n	800479c <_strtol_l.constprop.0+0x74>
 80047d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80047d4:	2f19      	cmp	r7, #25
 80047d6:	d804      	bhi.n	80047e2 <_strtol_l.constprop.0+0xba>
 80047d8:	3c57      	subs	r4, #87	; 0x57
 80047da:	e7df      	b.n	800479c <_strtol_l.constprop.0+0x74>
 80047dc:	f04f 32ff 	mov.w	r2, #4294967295
 80047e0:	e7e8      	b.n	80047b4 <_strtol_l.constprop.0+0x8c>
 80047e2:	1c53      	adds	r3, r2, #1
 80047e4:	d108      	bne.n	80047f8 <_strtol_l.constprop.0+0xd0>
 80047e6:	2322      	movs	r3, #34	; 0x22
 80047e8:	4660      	mov	r0, ip
 80047ea:	f8ce 3000 	str.w	r3, [lr]
 80047ee:	f1b8 0f00 	cmp.w	r8, #0
 80047f2:	d0a6      	beq.n	8004742 <_strtol_l.constprop.0+0x1a>
 80047f4:	1e69      	subs	r1, r5, #1
 80047f6:	e006      	b.n	8004806 <_strtol_l.constprop.0+0xde>
 80047f8:	b106      	cbz	r6, 80047fc <_strtol_l.constprop.0+0xd4>
 80047fa:	4240      	negs	r0, r0
 80047fc:	f1b8 0f00 	cmp.w	r8, #0
 8004800:	d09f      	beq.n	8004742 <_strtol_l.constprop.0+0x1a>
 8004802:	2a00      	cmp	r2, #0
 8004804:	d1f6      	bne.n	80047f4 <_strtol_l.constprop.0+0xcc>
 8004806:	f8c8 1000 	str.w	r1, [r8]
 800480a:	e79a      	b.n	8004742 <_strtol_l.constprop.0+0x1a>
 800480c:	2430      	movs	r4, #48	; 0x30
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1b5      	bne.n	800477e <_strtol_l.constprop.0+0x56>
 8004812:	2308      	movs	r3, #8
 8004814:	e7b3      	b.n	800477e <_strtol_l.constprop.0+0x56>
 8004816:	2c30      	cmp	r4, #48	; 0x30
 8004818:	d0a9      	beq.n	800476e <_strtol_l.constprop.0+0x46>
 800481a:	230a      	movs	r3, #10
 800481c:	e7af      	b.n	800477e <_strtol_l.constprop.0+0x56>
 800481e:	bf00      	nop
 8004820:	0800528b 	.word	0x0800528b

08004824 <strtol>:
 8004824:	4613      	mov	r3, r2
 8004826:	460a      	mov	r2, r1
 8004828:	4601      	mov	r1, r0
 800482a:	4802      	ldr	r0, [pc, #8]	; (8004834 <strtol+0x10>)
 800482c:	6800      	ldr	r0, [r0, #0]
 800482e:	f7ff bf7b 	b.w	8004728 <_strtol_l.constprop.0>
 8004832:	bf00      	nop
 8004834:	20000058 	.word	0x20000058

08004838 <siprintf>:
 8004838:	b40e      	push	{r1, r2, r3}
 800483a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800483e:	b500      	push	{lr}
 8004840:	b09c      	sub	sp, #112	; 0x70
 8004842:	ab1d      	add	r3, sp, #116	; 0x74
 8004844:	9002      	str	r0, [sp, #8]
 8004846:	9006      	str	r0, [sp, #24]
 8004848:	9107      	str	r1, [sp, #28]
 800484a:	9104      	str	r1, [sp, #16]
 800484c:	4808      	ldr	r0, [pc, #32]	; (8004870 <siprintf+0x38>)
 800484e:	4909      	ldr	r1, [pc, #36]	; (8004874 <siprintf+0x3c>)
 8004850:	f853 2b04 	ldr.w	r2, [r3], #4
 8004854:	9105      	str	r1, [sp, #20]
 8004856:	6800      	ldr	r0, [r0, #0]
 8004858:	a902      	add	r1, sp, #8
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	f000 f9ba 	bl	8004bd4 <_svfiprintf_r>
 8004860:	2200      	movs	r2, #0
 8004862:	9b02      	ldr	r3, [sp, #8]
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	b01c      	add	sp, #112	; 0x70
 8004868:	f85d eb04 	ldr.w	lr, [sp], #4
 800486c:	b003      	add	sp, #12
 800486e:	4770      	bx	lr
 8004870:	20000058 	.word	0x20000058
 8004874:	ffff0208 	.word	0xffff0208

08004878 <memset>:
 8004878:	4603      	mov	r3, r0
 800487a:	4402      	add	r2, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <__strtok_r>:
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800488a:	b908      	cbnz	r0, 8004890 <__strtok_r+0x8>
 800488c:	6810      	ldr	r0, [r2, #0]
 800488e:	b188      	cbz	r0, 80048b4 <__strtok_r+0x2c>
 8004890:	4604      	mov	r4, r0
 8004892:	460f      	mov	r7, r1
 8004894:	4620      	mov	r0, r4
 8004896:	f814 5b01 	ldrb.w	r5, [r4], #1
 800489a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800489e:	b91e      	cbnz	r6, 80048a8 <__strtok_r+0x20>
 80048a0:	b965      	cbnz	r5, 80048bc <__strtok_r+0x34>
 80048a2:	4628      	mov	r0, r5
 80048a4:	6015      	str	r5, [r2, #0]
 80048a6:	e005      	b.n	80048b4 <__strtok_r+0x2c>
 80048a8:	42b5      	cmp	r5, r6
 80048aa:	d1f6      	bne.n	800489a <__strtok_r+0x12>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f0      	bne.n	8004892 <__strtok_r+0xa>
 80048b0:	6014      	str	r4, [r2, #0]
 80048b2:	7003      	strb	r3, [r0, #0]
 80048b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b6:	461c      	mov	r4, r3
 80048b8:	e00c      	b.n	80048d4 <__strtok_r+0x4c>
 80048ba:	b915      	cbnz	r5, 80048c2 <__strtok_r+0x3a>
 80048bc:	460e      	mov	r6, r1
 80048be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80048c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80048c6:	42ab      	cmp	r3, r5
 80048c8:	d1f7      	bne.n	80048ba <__strtok_r+0x32>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f3      	beq.n	80048b6 <__strtok_r+0x2e>
 80048ce:	2300      	movs	r3, #0
 80048d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80048d4:	6014      	str	r4, [r2, #0]
 80048d6:	e7ed      	b.n	80048b4 <__strtok_r+0x2c>

080048d8 <strtok_r>:
 80048d8:	2301      	movs	r3, #1
 80048da:	f7ff bfd5 	b.w	8004888 <__strtok_r>
	...

080048e0 <__errno>:
 80048e0:	4b01      	ldr	r3, [pc, #4]	; (80048e8 <__errno+0x8>)
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000058 	.word	0x20000058

080048ec <__libc_init_array>:
 80048ec:	b570      	push	{r4, r5, r6, lr}
 80048ee:	2600      	movs	r6, #0
 80048f0:	4d0c      	ldr	r5, [pc, #48]	; (8004924 <__libc_init_array+0x38>)
 80048f2:	4c0d      	ldr	r4, [pc, #52]	; (8004928 <__libc_init_array+0x3c>)
 80048f4:	1b64      	subs	r4, r4, r5
 80048f6:	10a4      	asrs	r4, r4, #2
 80048f8:	42a6      	cmp	r6, r4
 80048fa:	d109      	bne.n	8004910 <__libc_init_array+0x24>
 80048fc:	f000 fc7a 	bl	80051f4 <_init>
 8004900:	2600      	movs	r6, #0
 8004902:	4d0a      	ldr	r5, [pc, #40]	; (800492c <__libc_init_array+0x40>)
 8004904:	4c0a      	ldr	r4, [pc, #40]	; (8004930 <__libc_init_array+0x44>)
 8004906:	1b64      	subs	r4, r4, r5
 8004908:	10a4      	asrs	r4, r4, #2
 800490a:	42a6      	cmp	r6, r4
 800490c:	d105      	bne.n	800491a <__libc_init_array+0x2e>
 800490e:	bd70      	pop	{r4, r5, r6, pc}
 8004910:	f855 3b04 	ldr.w	r3, [r5], #4
 8004914:	4798      	blx	r3
 8004916:	3601      	adds	r6, #1
 8004918:	e7ee      	b.n	80048f8 <__libc_init_array+0xc>
 800491a:	f855 3b04 	ldr.w	r3, [r5], #4
 800491e:	4798      	blx	r3
 8004920:	3601      	adds	r6, #1
 8004922:	e7f2      	b.n	800490a <__libc_init_array+0x1e>
 8004924:	080053c0 	.word	0x080053c0
 8004928:	080053c0 	.word	0x080053c0
 800492c:	080053c0 	.word	0x080053c0
 8004930:	080053c4 	.word	0x080053c4

08004934 <__retarget_lock_acquire_recursive>:
 8004934:	4770      	bx	lr

08004936 <__retarget_lock_release_recursive>:
 8004936:	4770      	bx	lr

08004938 <_free_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4605      	mov	r5, r0
 800493c:	2900      	cmp	r1, #0
 800493e:	d040      	beq.n	80049c2 <_free_r+0x8a>
 8004940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004944:	1f0c      	subs	r4, r1, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	bfb8      	it	lt
 800494a:	18e4      	addlt	r4, r4, r3
 800494c:	f000 f8dc 	bl	8004b08 <__malloc_lock>
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <_free_r+0x8c>)
 8004952:	6813      	ldr	r3, [r2, #0]
 8004954:	b933      	cbnz	r3, 8004964 <_free_r+0x2c>
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	6014      	str	r4, [r2, #0]
 800495a:	4628      	mov	r0, r5
 800495c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004960:	f000 b8d8 	b.w	8004b14 <__malloc_unlock>
 8004964:	42a3      	cmp	r3, r4
 8004966:	d908      	bls.n	800497a <_free_r+0x42>
 8004968:	6820      	ldr	r0, [r4, #0]
 800496a:	1821      	adds	r1, r4, r0
 800496c:	428b      	cmp	r3, r1
 800496e:	bf01      	itttt	eq
 8004970:	6819      	ldreq	r1, [r3, #0]
 8004972:	685b      	ldreq	r3, [r3, #4]
 8004974:	1809      	addeq	r1, r1, r0
 8004976:	6021      	streq	r1, [r4, #0]
 8004978:	e7ed      	b.n	8004956 <_free_r+0x1e>
 800497a:	461a      	mov	r2, r3
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	b10b      	cbz	r3, 8004984 <_free_r+0x4c>
 8004980:	42a3      	cmp	r3, r4
 8004982:	d9fa      	bls.n	800497a <_free_r+0x42>
 8004984:	6811      	ldr	r1, [r2, #0]
 8004986:	1850      	adds	r0, r2, r1
 8004988:	42a0      	cmp	r0, r4
 800498a:	d10b      	bne.n	80049a4 <_free_r+0x6c>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	4401      	add	r1, r0
 8004990:	1850      	adds	r0, r2, r1
 8004992:	4283      	cmp	r3, r0
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	d1e0      	bne.n	800495a <_free_r+0x22>
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	4408      	add	r0, r1
 800499e:	6010      	str	r0, [r2, #0]
 80049a0:	6053      	str	r3, [r2, #4]
 80049a2:	e7da      	b.n	800495a <_free_r+0x22>
 80049a4:	d902      	bls.n	80049ac <_free_r+0x74>
 80049a6:	230c      	movs	r3, #12
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	e7d6      	b.n	800495a <_free_r+0x22>
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	1821      	adds	r1, r4, r0
 80049b0:	428b      	cmp	r3, r1
 80049b2:	bf01      	itttt	eq
 80049b4:	6819      	ldreq	r1, [r3, #0]
 80049b6:	685b      	ldreq	r3, [r3, #4]
 80049b8:	1809      	addeq	r1, r1, r0
 80049ba:	6021      	streq	r1, [r4, #0]
 80049bc:	6063      	str	r3, [r4, #4]
 80049be:	6054      	str	r4, [r2, #4]
 80049c0:	e7cb      	b.n	800495a <_free_r+0x22>
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	20000388 	.word	0x20000388

080049c8 <sbrk_aligned>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4e0e      	ldr	r6, [pc, #56]	; (8004a04 <sbrk_aligned+0x3c>)
 80049cc:	460c      	mov	r4, r1
 80049ce:	6831      	ldr	r1, [r6, #0]
 80049d0:	4605      	mov	r5, r0
 80049d2:	b911      	cbnz	r1, 80049da <sbrk_aligned+0x12>
 80049d4:	f000 fbaa 	bl	800512c <_sbrk_r>
 80049d8:	6030      	str	r0, [r6, #0]
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 fba5 	bl	800512c <_sbrk_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	d00a      	beq.n	80049fc <sbrk_aligned+0x34>
 80049e6:	1cc4      	adds	r4, r0, #3
 80049e8:	f024 0403 	bic.w	r4, r4, #3
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d007      	beq.n	8004a00 <sbrk_aligned+0x38>
 80049f0:	1a21      	subs	r1, r4, r0
 80049f2:	4628      	mov	r0, r5
 80049f4:	f000 fb9a 	bl	800512c <_sbrk_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d101      	bne.n	8004a00 <sbrk_aligned+0x38>
 80049fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004a00:	4620      	mov	r0, r4
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	2000038c 	.word	0x2000038c

08004a08 <_malloc_r>:
 8004a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a0c:	1ccd      	adds	r5, r1, #3
 8004a0e:	f025 0503 	bic.w	r5, r5, #3
 8004a12:	3508      	adds	r5, #8
 8004a14:	2d0c      	cmp	r5, #12
 8004a16:	bf38      	it	cc
 8004a18:	250c      	movcc	r5, #12
 8004a1a:	2d00      	cmp	r5, #0
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	db01      	blt.n	8004a24 <_malloc_r+0x1c>
 8004a20:	42a9      	cmp	r1, r5
 8004a22:	d905      	bls.n	8004a30 <_malloc_r+0x28>
 8004a24:	230c      	movs	r3, #12
 8004a26:	2600      	movs	r6, #0
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b04 <_malloc_r+0xfc>
 8004a34:	f000 f868 	bl	8004b08 <__malloc_lock>
 8004a38:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3c:	461c      	mov	r4, r3
 8004a3e:	bb5c      	cbnz	r4, 8004a98 <_malloc_r+0x90>
 8004a40:	4629      	mov	r1, r5
 8004a42:	4638      	mov	r0, r7
 8004a44:	f7ff ffc0 	bl	80049c8 <sbrk_aligned>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	4604      	mov	r4, r0
 8004a4c:	d155      	bne.n	8004afa <_malloc_r+0xf2>
 8004a4e:	f8d8 4000 	ldr.w	r4, [r8]
 8004a52:	4626      	mov	r6, r4
 8004a54:	2e00      	cmp	r6, #0
 8004a56:	d145      	bne.n	8004ae4 <_malloc_r+0xdc>
 8004a58:	2c00      	cmp	r4, #0
 8004a5a:	d048      	beq.n	8004aee <_malloc_r+0xe6>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4638      	mov	r0, r7
 8004a62:	eb04 0903 	add.w	r9, r4, r3
 8004a66:	f000 fb61 	bl	800512c <_sbrk_r>
 8004a6a:	4581      	cmp	r9, r0
 8004a6c:	d13f      	bne.n	8004aee <_malloc_r+0xe6>
 8004a6e:	6821      	ldr	r1, [r4, #0]
 8004a70:	4638      	mov	r0, r7
 8004a72:	1a6d      	subs	r5, r5, r1
 8004a74:	4629      	mov	r1, r5
 8004a76:	f7ff ffa7 	bl	80049c8 <sbrk_aligned>
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	d037      	beq.n	8004aee <_malloc_r+0xe6>
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	442b      	add	r3, r5
 8004a82:	6023      	str	r3, [r4, #0]
 8004a84:	f8d8 3000 	ldr.w	r3, [r8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d038      	beq.n	8004afe <_malloc_r+0xf6>
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	42a2      	cmp	r2, r4
 8004a90:	d12b      	bne.n	8004aea <_malloc_r+0xe2>
 8004a92:	2200      	movs	r2, #0
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	e00f      	b.n	8004ab8 <_malloc_r+0xb0>
 8004a98:	6822      	ldr	r2, [r4, #0]
 8004a9a:	1b52      	subs	r2, r2, r5
 8004a9c:	d41f      	bmi.n	8004ade <_malloc_r+0xd6>
 8004a9e:	2a0b      	cmp	r2, #11
 8004aa0:	d917      	bls.n	8004ad2 <_malloc_r+0xca>
 8004aa2:	1961      	adds	r1, r4, r5
 8004aa4:	42a3      	cmp	r3, r4
 8004aa6:	6025      	str	r5, [r4, #0]
 8004aa8:	bf18      	it	ne
 8004aaa:	6059      	strne	r1, [r3, #4]
 8004aac:	6863      	ldr	r3, [r4, #4]
 8004aae:	bf08      	it	eq
 8004ab0:	f8c8 1000 	streq.w	r1, [r8]
 8004ab4:	5162      	str	r2, [r4, r5]
 8004ab6:	604b      	str	r3, [r1, #4]
 8004ab8:	4638      	mov	r0, r7
 8004aba:	f104 060b 	add.w	r6, r4, #11
 8004abe:	f000 f829 	bl	8004b14 <__malloc_unlock>
 8004ac2:	f026 0607 	bic.w	r6, r6, #7
 8004ac6:	1d23      	adds	r3, r4, #4
 8004ac8:	1af2      	subs	r2, r6, r3
 8004aca:	d0ae      	beq.n	8004a2a <_malloc_r+0x22>
 8004acc:	1b9b      	subs	r3, r3, r6
 8004ace:	50a3      	str	r3, [r4, r2]
 8004ad0:	e7ab      	b.n	8004a2a <_malloc_r+0x22>
 8004ad2:	42a3      	cmp	r3, r4
 8004ad4:	6862      	ldr	r2, [r4, #4]
 8004ad6:	d1dd      	bne.n	8004a94 <_malloc_r+0x8c>
 8004ad8:	f8c8 2000 	str.w	r2, [r8]
 8004adc:	e7ec      	b.n	8004ab8 <_malloc_r+0xb0>
 8004ade:	4623      	mov	r3, r4
 8004ae0:	6864      	ldr	r4, [r4, #4]
 8004ae2:	e7ac      	b.n	8004a3e <_malloc_r+0x36>
 8004ae4:	4634      	mov	r4, r6
 8004ae6:	6876      	ldr	r6, [r6, #4]
 8004ae8:	e7b4      	b.n	8004a54 <_malloc_r+0x4c>
 8004aea:	4613      	mov	r3, r2
 8004aec:	e7cc      	b.n	8004a88 <_malloc_r+0x80>
 8004aee:	230c      	movs	r3, #12
 8004af0:	4638      	mov	r0, r7
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	f000 f80e 	bl	8004b14 <__malloc_unlock>
 8004af8:	e797      	b.n	8004a2a <_malloc_r+0x22>
 8004afa:	6025      	str	r5, [r4, #0]
 8004afc:	e7dc      	b.n	8004ab8 <_malloc_r+0xb0>
 8004afe:	605b      	str	r3, [r3, #4]
 8004b00:	deff      	udf	#255	; 0xff
 8004b02:	bf00      	nop
 8004b04:	20000388 	.word	0x20000388

08004b08 <__malloc_lock>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__malloc_lock+0x8>)
 8004b0a:	f7ff bf13 	b.w	8004934 <__retarget_lock_acquire_recursive>
 8004b0e:	bf00      	nop
 8004b10:	20000384 	.word	0x20000384

08004b14 <__malloc_unlock>:
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <__malloc_unlock+0x8>)
 8004b16:	f7ff bf0e 	b.w	8004936 <__retarget_lock_release_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	20000384 	.word	0x20000384

08004b20 <__ssputs_r>:
 8004b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	461f      	mov	r7, r3
 8004b26:	688e      	ldr	r6, [r1, #8]
 8004b28:	4682      	mov	sl, r0
 8004b2a:	42be      	cmp	r6, r7
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	4690      	mov	r8, r2
 8004b30:	680b      	ldr	r3, [r1, #0]
 8004b32:	d82c      	bhi.n	8004b8e <__ssputs_r+0x6e>
 8004b34:	898a      	ldrh	r2, [r1, #12]
 8004b36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b3a:	d026      	beq.n	8004b8a <__ssputs_r+0x6a>
 8004b3c:	6965      	ldr	r5, [r4, #20]
 8004b3e:	6909      	ldr	r1, [r1, #16]
 8004b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b44:	eba3 0901 	sub.w	r9, r3, r1
 8004b48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b4c:	1c7b      	adds	r3, r7, #1
 8004b4e:	444b      	add	r3, r9
 8004b50:	106d      	asrs	r5, r5, #1
 8004b52:	429d      	cmp	r5, r3
 8004b54:	bf38      	it	cc
 8004b56:	461d      	movcc	r5, r3
 8004b58:	0553      	lsls	r3, r2, #21
 8004b5a:	d527      	bpl.n	8004bac <__ssputs_r+0x8c>
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f7ff ff53 	bl	8004a08 <_malloc_r>
 8004b62:	4606      	mov	r6, r0
 8004b64:	b360      	cbz	r0, 8004bc0 <__ssputs_r+0xa0>
 8004b66:	464a      	mov	r2, r9
 8004b68:	6921      	ldr	r1, [r4, #16]
 8004b6a:	f000 fafd 	bl	8005168 <memcpy>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	81a3      	strh	r3, [r4, #12]
 8004b7a:	6126      	str	r6, [r4, #16]
 8004b7c:	444e      	add	r6, r9
 8004b7e:	6026      	str	r6, [r4, #0]
 8004b80:	463e      	mov	r6, r7
 8004b82:	6165      	str	r5, [r4, #20]
 8004b84:	eba5 0509 	sub.w	r5, r5, r9
 8004b88:	60a5      	str	r5, [r4, #8]
 8004b8a:	42be      	cmp	r6, r7
 8004b8c:	d900      	bls.n	8004b90 <__ssputs_r+0x70>
 8004b8e:	463e      	mov	r6, r7
 8004b90:	4632      	mov	r2, r6
 8004b92:	4641      	mov	r1, r8
 8004b94:	6820      	ldr	r0, [r4, #0]
 8004b96:	f000 faaf 	bl	80050f8 <memmove>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	68a3      	ldr	r3, [r4, #8]
 8004b9e:	1b9b      	subs	r3, r3, r6
 8004ba0:	60a3      	str	r3, [r4, #8]
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	4433      	add	r3, r6
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bac:	462a      	mov	r2, r5
 8004bae:	f000 fae9 	bl	8005184 <_realloc_r>
 8004bb2:	4606      	mov	r6, r0
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d1e0      	bne.n	8004b7a <__ssputs_r+0x5a>
 8004bb8:	4650      	mov	r0, sl
 8004bba:	6921      	ldr	r1, [r4, #16]
 8004bbc:	f7ff febc 	bl	8004938 <_free_r>
 8004bc0:	230c      	movs	r3, #12
 8004bc2:	f8ca 3000 	str.w	r3, [sl]
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	e7e9      	b.n	8004ba8 <__ssputs_r+0x88>

08004bd4 <_svfiprintf_r>:
 8004bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd8:	4698      	mov	r8, r3
 8004bda:	898b      	ldrh	r3, [r1, #12]
 8004bdc:	4607      	mov	r7, r0
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	460d      	mov	r5, r1
 8004be2:	4614      	mov	r4, r2
 8004be4:	b09d      	sub	sp, #116	; 0x74
 8004be6:	d50e      	bpl.n	8004c06 <_svfiprintf_r+0x32>
 8004be8:	690b      	ldr	r3, [r1, #16]
 8004bea:	b963      	cbnz	r3, 8004c06 <_svfiprintf_r+0x32>
 8004bec:	2140      	movs	r1, #64	; 0x40
 8004bee:	f7ff ff0b 	bl	8004a08 <_malloc_r>
 8004bf2:	6028      	str	r0, [r5, #0]
 8004bf4:	6128      	str	r0, [r5, #16]
 8004bf6:	b920      	cbnz	r0, 8004c02 <_svfiprintf_r+0x2e>
 8004bf8:	230c      	movs	r3, #12
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	e0d0      	b.n	8004da4 <_svfiprintf_r+0x1d0>
 8004c02:	2340      	movs	r3, #64	; 0x40
 8004c04:	616b      	str	r3, [r5, #20]
 8004c06:	2300      	movs	r3, #0
 8004c08:	9309      	str	r3, [sp, #36]	; 0x24
 8004c0a:	2320      	movs	r3, #32
 8004c0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c10:	2330      	movs	r3, #48	; 0x30
 8004c12:	f04f 0901 	mov.w	r9, #1
 8004c16:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c1a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004dbc <_svfiprintf_r+0x1e8>
 8004c1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c22:	4623      	mov	r3, r4
 8004c24:	469a      	mov	sl, r3
 8004c26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c2a:	b10a      	cbz	r2, 8004c30 <_svfiprintf_r+0x5c>
 8004c2c:	2a25      	cmp	r2, #37	; 0x25
 8004c2e:	d1f9      	bne.n	8004c24 <_svfiprintf_r+0x50>
 8004c30:	ebba 0b04 	subs.w	fp, sl, r4
 8004c34:	d00b      	beq.n	8004c4e <_svfiprintf_r+0x7a>
 8004c36:	465b      	mov	r3, fp
 8004c38:	4622      	mov	r2, r4
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f7ff ff6f 	bl	8004b20 <__ssputs_r>
 8004c42:	3001      	adds	r0, #1
 8004c44:	f000 80a9 	beq.w	8004d9a <_svfiprintf_r+0x1c6>
 8004c48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c4a:	445a      	add	r2, fp
 8004c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c4e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a1 	beq.w	8004d9a <_svfiprintf_r+0x1c6>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c62:	f10a 0a01 	add.w	sl, sl, #1
 8004c66:	9304      	str	r3, [sp, #16]
 8004c68:	9307      	str	r3, [sp, #28]
 8004c6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c6e:	931a      	str	r3, [sp, #104]	; 0x68
 8004c70:	4654      	mov	r4, sl
 8004c72:	2205      	movs	r2, #5
 8004c74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c78:	4850      	ldr	r0, [pc, #320]	; (8004dbc <_svfiprintf_r+0x1e8>)
 8004c7a:	f000 fa67 	bl	800514c <memchr>
 8004c7e:	9a04      	ldr	r2, [sp, #16]
 8004c80:	b9d8      	cbnz	r0, 8004cba <_svfiprintf_r+0xe6>
 8004c82:	06d0      	lsls	r0, r2, #27
 8004c84:	bf44      	itt	mi
 8004c86:	2320      	movmi	r3, #32
 8004c88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c8c:	0711      	lsls	r1, r2, #28
 8004c8e:	bf44      	itt	mi
 8004c90:	232b      	movmi	r3, #43	; 0x2b
 8004c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c96:	f89a 3000 	ldrb.w	r3, [sl]
 8004c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c9c:	d015      	beq.n	8004cca <_svfiprintf_r+0xf6>
 8004c9e:	4654      	mov	r4, sl
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	f04f 0c0a 	mov.w	ip, #10
 8004ca6:	9a07      	ldr	r2, [sp, #28]
 8004ca8:	4621      	mov	r1, r4
 8004caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cae:	3b30      	subs	r3, #48	; 0x30
 8004cb0:	2b09      	cmp	r3, #9
 8004cb2:	d94d      	bls.n	8004d50 <_svfiprintf_r+0x17c>
 8004cb4:	b1b0      	cbz	r0, 8004ce4 <_svfiprintf_r+0x110>
 8004cb6:	9207      	str	r2, [sp, #28]
 8004cb8:	e014      	b.n	8004ce4 <_svfiprintf_r+0x110>
 8004cba:	eba0 0308 	sub.w	r3, r0, r8
 8004cbe:	fa09 f303 	lsl.w	r3, r9, r3
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	46a2      	mov	sl, r4
 8004cc6:	9304      	str	r3, [sp, #16]
 8004cc8:	e7d2      	b.n	8004c70 <_svfiprintf_r+0x9c>
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	1d19      	adds	r1, r3, #4
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	9103      	str	r1, [sp, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bfbb      	ittet	lt
 8004cd6:	425b      	neglt	r3, r3
 8004cd8:	f042 0202 	orrlt.w	r2, r2, #2
 8004cdc:	9307      	strge	r3, [sp, #28]
 8004cde:	9307      	strlt	r3, [sp, #28]
 8004ce0:	bfb8      	it	lt
 8004ce2:	9204      	strlt	r2, [sp, #16]
 8004ce4:	7823      	ldrb	r3, [r4, #0]
 8004ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ce8:	d10c      	bne.n	8004d04 <_svfiprintf_r+0x130>
 8004cea:	7863      	ldrb	r3, [r4, #1]
 8004cec:	2b2a      	cmp	r3, #42	; 0x2a
 8004cee:	d134      	bne.n	8004d5a <_svfiprintf_r+0x186>
 8004cf0:	9b03      	ldr	r3, [sp, #12]
 8004cf2:	3402      	adds	r4, #2
 8004cf4:	1d1a      	adds	r2, r3, #4
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	9203      	str	r2, [sp, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	bfb8      	it	lt
 8004cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d02:	9305      	str	r3, [sp, #20]
 8004d04:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004dc0 <_svfiprintf_r+0x1ec>
 8004d08:	2203      	movs	r2, #3
 8004d0a:	4650      	mov	r0, sl
 8004d0c:	7821      	ldrb	r1, [r4, #0]
 8004d0e:	f000 fa1d 	bl	800514c <memchr>
 8004d12:	b138      	cbz	r0, 8004d24 <_svfiprintf_r+0x150>
 8004d14:	2240      	movs	r2, #64	; 0x40
 8004d16:	9b04      	ldr	r3, [sp, #16]
 8004d18:	eba0 000a 	sub.w	r0, r0, sl
 8004d1c:	4082      	lsls	r2, r0
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	3401      	adds	r4, #1
 8004d22:	9304      	str	r3, [sp, #16]
 8004d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d28:	2206      	movs	r2, #6
 8004d2a:	4826      	ldr	r0, [pc, #152]	; (8004dc4 <_svfiprintf_r+0x1f0>)
 8004d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d30:	f000 fa0c 	bl	800514c <memchr>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d038      	beq.n	8004daa <_svfiprintf_r+0x1d6>
 8004d38:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <_svfiprintf_r+0x1f4>)
 8004d3a:	bb1b      	cbnz	r3, 8004d84 <_svfiprintf_r+0x1b0>
 8004d3c:	9b03      	ldr	r3, [sp, #12]
 8004d3e:	3307      	adds	r3, #7
 8004d40:	f023 0307 	bic.w	r3, r3, #7
 8004d44:	3308      	adds	r3, #8
 8004d46:	9303      	str	r3, [sp, #12]
 8004d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d4a:	4433      	add	r3, r6
 8004d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d4e:	e768      	b.n	8004c22 <_svfiprintf_r+0x4e>
 8004d50:	460c      	mov	r4, r1
 8004d52:	2001      	movs	r0, #1
 8004d54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d58:	e7a6      	b.n	8004ca8 <_svfiprintf_r+0xd4>
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f04f 0c0a 	mov.w	ip, #10
 8004d60:	4619      	mov	r1, r3
 8004d62:	3401      	adds	r4, #1
 8004d64:	9305      	str	r3, [sp, #20]
 8004d66:	4620      	mov	r0, r4
 8004d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d6c:	3a30      	subs	r2, #48	; 0x30
 8004d6e:	2a09      	cmp	r2, #9
 8004d70:	d903      	bls.n	8004d7a <_svfiprintf_r+0x1a6>
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0c6      	beq.n	8004d04 <_svfiprintf_r+0x130>
 8004d76:	9105      	str	r1, [sp, #20]
 8004d78:	e7c4      	b.n	8004d04 <_svfiprintf_r+0x130>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d82:	e7f0      	b.n	8004d66 <_svfiprintf_r+0x192>
 8004d84:	ab03      	add	r3, sp, #12
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	462a      	mov	r2, r5
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <_svfiprintf_r+0x1f8>)
 8004d8e:	a904      	add	r1, sp, #16
 8004d90:	f3af 8000 	nop.w
 8004d94:	1c42      	adds	r2, r0, #1
 8004d96:	4606      	mov	r6, r0
 8004d98:	d1d6      	bne.n	8004d48 <_svfiprintf_r+0x174>
 8004d9a:	89ab      	ldrh	r3, [r5, #12]
 8004d9c:	065b      	lsls	r3, r3, #25
 8004d9e:	f53f af2d 	bmi.w	8004bfc <_svfiprintf_r+0x28>
 8004da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004da4:	b01d      	add	sp, #116	; 0x74
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	ab03      	add	r3, sp, #12
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	462a      	mov	r2, r5
 8004db0:	4638      	mov	r0, r7
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <_svfiprintf_r+0x1f8>)
 8004db4:	a904      	add	r1, sp, #16
 8004db6:	f000 f87d 	bl	8004eb4 <_printf_i>
 8004dba:	e7eb      	b.n	8004d94 <_svfiprintf_r+0x1c0>
 8004dbc:	0800538b 	.word	0x0800538b
 8004dc0:	08005391 	.word	0x08005391
 8004dc4:	08005395 	.word	0x08005395
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	08004b21 	.word	0x08004b21

08004dd0 <_printf_common>:
 8004dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	4699      	mov	r9, r3
 8004dd8:	688a      	ldr	r2, [r1, #8]
 8004dda:	690b      	ldr	r3, [r1, #16]
 8004ddc:	4607      	mov	r7, r0
 8004dde:	4293      	cmp	r3, r2
 8004de0:	bfb8      	it	lt
 8004de2:	4613      	movlt	r3, r2
 8004de4:	6033      	str	r3, [r6, #0]
 8004de6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004dea:	460c      	mov	r4, r1
 8004dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004df0:	b10a      	cbz	r2, 8004df6 <_printf_common+0x26>
 8004df2:	3301      	adds	r3, #1
 8004df4:	6033      	str	r3, [r6, #0]
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	0699      	lsls	r1, r3, #26
 8004dfa:	bf42      	ittt	mi
 8004dfc:	6833      	ldrmi	r3, [r6, #0]
 8004dfe:	3302      	addmi	r3, #2
 8004e00:	6033      	strmi	r3, [r6, #0]
 8004e02:	6825      	ldr	r5, [r4, #0]
 8004e04:	f015 0506 	ands.w	r5, r5, #6
 8004e08:	d106      	bne.n	8004e18 <_printf_common+0x48>
 8004e0a:	f104 0a19 	add.w	sl, r4, #25
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	6832      	ldr	r2, [r6, #0]
 8004e12:	1a9b      	subs	r3, r3, r2
 8004e14:	42ab      	cmp	r3, r5
 8004e16:	dc2b      	bgt.n	8004e70 <_printf_common+0xa0>
 8004e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e1c:	1e13      	subs	r3, r2, #0
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	bf18      	it	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	0692      	lsls	r2, r2, #26
 8004e26:	d430      	bmi.n	8004e8a <_printf_common+0xba>
 8004e28:	4649      	mov	r1, r9
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e30:	47c0      	blx	r8
 8004e32:	3001      	adds	r0, #1
 8004e34:	d023      	beq.n	8004e7e <_printf_common+0xae>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	6922      	ldr	r2, [r4, #16]
 8004e3a:	f003 0306 	and.w	r3, r3, #6
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	bf14      	ite	ne
 8004e42:	2500      	movne	r5, #0
 8004e44:	6833      	ldreq	r3, [r6, #0]
 8004e46:	f04f 0600 	mov.w	r6, #0
 8004e4a:	bf08      	it	eq
 8004e4c:	68e5      	ldreq	r5, [r4, #12]
 8004e4e:	f104 041a 	add.w	r4, r4, #26
 8004e52:	bf08      	it	eq
 8004e54:	1aed      	subeq	r5, r5, r3
 8004e56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e5a:	bf08      	it	eq
 8004e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e60:	4293      	cmp	r3, r2
 8004e62:	bfc4      	itt	gt
 8004e64:	1a9b      	subgt	r3, r3, r2
 8004e66:	18ed      	addgt	r5, r5, r3
 8004e68:	42b5      	cmp	r5, r6
 8004e6a:	d11a      	bne.n	8004ea2 <_printf_common+0xd2>
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	e008      	b.n	8004e82 <_printf_common+0xb2>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4652      	mov	r2, sl
 8004e74:	4649      	mov	r1, r9
 8004e76:	4638      	mov	r0, r7
 8004e78:	47c0      	blx	r8
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d103      	bne.n	8004e86 <_printf_common+0xb6>
 8004e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e86:	3501      	adds	r5, #1
 8004e88:	e7c1      	b.n	8004e0e <_printf_common+0x3e>
 8004e8a:	2030      	movs	r0, #48	; 0x30
 8004e8c:	18e1      	adds	r1, r4, r3
 8004e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e98:	4422      	add	r2, r4
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ea0:	e7c2      	b.n	8004e28 <_printf_common+0x58>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	47c0      	blx	r8
 8004eac:	3001      	adds	r0, #1
 8004eae:	d0e6      	beq.n	8004e7e <_printf_common+0xae>
 8004eb0:	3601      	adds	r6, #1
 8004eb2:	e7d9      	b.n	8004e68 <_printf_common+0x98>

08004eb4 <_printf_i>:
 8004eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	7e0f      	ldrb	r7, [r1, #24]
 8004eba:	4691      	mov	r9, r2
 8004ebc:	2f78      	cmp	r7, #120	; 0x78
 8004ebe:	4680      	mov	r8, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	469a      	mov	sl, r3
 8004ec4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004eca:	d807      	bhi.n	8004edc <_printf_i+0x28>
 8004ecc:	2f62      	cmp	r7, #98	; 0x62
 8004ece:	d80a      	bhi.n	8004ee6 <_printf_i+0x32>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	f000 80d5 	beq.w	8005080 <_printf_i+0x1cc>
 8004ed6:	2f58      	cmp	r7, #88	; 0x58
 8004ed8:	f000 80c1 	beq.w	800505e <_printf_i+0x1aa>
 8004edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ee4:	e03a      	b.n	8004f5c <_printf_i+0xa8>
 8004ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004eea:	2b15      	cmp	r3, #21
 8004eec:	d8f6      	bhi.n	8004edc <_printf_i+0x28>
 8004eee:	a101      	add	r1, pc, #4	; (adr r1, 8004ef4 <_printf_i+0x40>)
 8004ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f61 	.word	0x08004f61
 8004efc:	08004edd 	.word	0x08004edd
 8004f00:	08004edd 	.word	0x08004edd
 8004f04:	08004edd 	.word	0x08004edd
 8004f08:	08004edd 	.word	0x08004edd
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004edd 	.word	0x08004edd
 8004f14:	08004edd 	.word	0x08004edd
 8004f18:	08004edd 	.word	0x08004edd
 8004f1c:	08004edd 	.word	0x08004edd
 8004f20:	08005067 	.word	0x08005067
 8004f24:	08004f8d 	.word	0x08004f8d
 8004f28:	08005021 	.word	0x08005021
 8004f2c:	08004edd 	.word	0x08004edd
 8004f30:	08004edd 	.word	0x08004edd
 8004f34:	08005089 	.word	0x08005089
 8004f38:	08004edd 	.word	0x08004edd
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004edd 	.word	0x08004edd
 8004f44:	08004edd 	.word	0x08004edd
 8004f48:	08005029 	.word	0x08005029
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	1d1a      	adds	r2, r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	602a      	str	r2, [r5, #0]
 8004f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0a0      	b.n	80050a2 <_printf_i+0x1ee>
 8004f60:	6820      	ldr	r0, [r4, #0]
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	0607      	lsls	r7, r0, #24
 8004f66:	f103 0104 	add.w	r1, r3, #4
 8004f6a:	6029      	str	r1, [r5, #0]
 8004f6c:	d501      	bpl.n	8004f72 <_printf_i+0xbe>
 8004f6e:	681e      	ldr	r6, [r3, #0]
 8004f70:	e003      	b.n	8004f7a <_printf_i+0xc6>
 8004f72:	0646      	lsls	r6, r0, #25
 8004f74:	d5fb      	bpl.n	8004f6e <_printf_i+0xba>
 8004f76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004f7a:	2e00      	cmp	r6, #0
 8004f7c:	da03      	bge.n	8004f86 <_printf_i+0xd2>
 8004f7e:	232d      	movs	r3, #45	; 0x2d
 8004f80:	4276      	negs	r6, r6
 8004f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f86:	230a      	movs	r3, #10
 8004f88:	4859      	ldr	r0, [pc, #356]	; (80050f0 <_printf_i+0x23c>)
 8004f8a:	e012      	b.n	8004fb2 <_printf_i+0xfe>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	1d19      	adds	r1, r3, #4
 8004f92:	6029      	str	r1, [r5, #0]
 8004f94:	0605      	lsls	r5, r0, #24
 8004f96:	d501      	bpl.n	8004f9c <_printf_i+0xe8>
 8004f98:	681e      	ldr	r6, [r3, #0]
 8004f9a:	e002      	b.n	8004fa2 <_printf_i+0xee>
 8004f9c:	0641      	lsls	r1, r0, #25
 8004f9e:	d5fb      	bpl.n	8004f98 <_printf_i+0xe4>
 8004fa0:	881e      	ldrh	r6, [r3, #0]
 8004fa2:	2f6f      	cmp	r7, #111	; 0x6f
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2308      	moveq	r3, #8
 8004fa8:	230a      	movne	r3, #10
 8004faa:	4851      	ldr	r0, [pc, #324]	; (80050f0 <_printf_i+0x23c>)
 8004fac:	2100      	movs	r1, #0
 8004fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fb2:	6865      	ldr	r5, [r4, #4]
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	bfa8      	it	ge
 8004fb8:	6821      	ldrge	r1, [r4, #0]
 8004fba:	60a5      	str	r5, [r4, #8]
 8004fbc:	bfa4      	itt	ge
 8004fbe:	f021 0104 	bicge.w	r1, r1, #4
 8004fc2:	6021      	strge	r1, [r4, #0]
 8004fc4:	b90e      	cbnz	r6, 8004fca <_printf_i+0x116>
 8004fc6:	2d00      	cmp	r5, #0
 8004fc8:	d04b      	beq.n	8005062 <_printf_i+0x1ae>
 8004fca:	4615      	mov	r5, r2
 8004fcc:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fd0:	fb03 6711 	mls	r7, r3, r1, r6
 8004fd4:	5dc7      	ldrb	r7, [r0, r7]
 8004fd6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fda:	4637      	mov	r7, r6
 8004fdc:	42bb      	cmp	r3, r7
 8004fde:	460e      	mov	r6, r1
 8004fe0:	d9f4      	bls.n	8004fcc <_printf_i+0x118>
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d10b      	bne.n	8004ffe <_printf_i+0x14a>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	07de      	lsls	r6, r3, #31
 8004fea:	d508      	bpl.n	8004ffe <_printf_i+0x14a>
 8004fec:	6923      	ldr	r3, [r4, #16]
 8004fee:	6861      	ldr	r1, [r4, #4]
 8004ff0:	4299      	cmp	r1, r3
 8004ff2:	bfde      	ittt	le
 8004ff4:	2330      	movle	r3, #48	; 0x30
 8004ff6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ffa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ffe:	1b52      	subs	r2, r2, r5
 8005000:	6122      	str	r2, [r4, #16]
 8005002:	464b      	mov	r3, r9
 8005004:	4621      	mov	r1, r4
 8005006:	4640      	mov	r0, r8
 8005008:	f8cd a000 	str.w	sl, [sp]
 800500c:	aa03      	add	r2, sp, #12
 800500e:	f7ff fedf 	bl	8004dd0 <_printf_common>
 8005012:	3001      	adds	r0, #1
 8005014:	d14a      	bne.n	80050ac <_printf_i+0x1f8>
 8005016:	f04f 30ff 	mov.w	r0, #4294967295
 800501a:	b004      	add	sp, #16
 800501c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	f043 0320 	orr.w	r3, r3, #32
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	2778      	movs	r7, #120	; 0x78
 800502a:	4832      	ldr	r0, [pc, #200]	; (80050f4 <_printf_i+0x240>)
 800502c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	6829      	ldr	r1, [r5, #0]
 8005034:	061f      	lsls	r7, r3, #24
 8005036:	f851 6b04 	ldr.w	r6, [r1], #4
 800503a:	d402      	bmi.n	8005042 <_printf_i+0x18e>
 800503c:	065f      	lsls	r7, r3, #25
 800503e:	bf48      	it	mi
 8005040:	b2b6      	uxthmi	r6, r6
 8005042:	07df      	lsls	r7, r3, #31
 8005044:	bf48      	it	mi
 8005046:	f043 0320 	orrmi.w	r3, r3, #32
 800504a:	6029      	str	r1, [r5, #0]
 800504c:	bf48      	it	mi
 800504e:	6023      	strmi	r3, [r4, #0]
 8005050:	b91e      	cbnz	r6, 800505a <_printf_i+0x1a6>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	f023 0320 	bic.w	r3, r3, #32
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	2310      	movs	r3, #16
 800505c:	e7a6      	b.n	8004fac <_printf_i+0xf8>
 800505e:	4824      	ldr	r0, [pc, #144]	; (80050f0 <_printf_i+0x23c>)
 8005060:	e7e4      	b.n	800502c <_printf_i+0x178>
 8005062:	4615      	mov	r5, r2
 8005064:	e7bd      	b.n	8004fe2 <_printf_i+0x12e>
 8005066:	682b      	ldr	r3, [r5, #0]
 8005068:	6826      	ldr	r6, [r4, #0]
 800506a:	1d18      	adds	r0, r3, #4
 800506c:	6961      	ldr	r1, [r4, #20]
 800506e:	6028      	str	r0, [r5, #0]
 8005070:	0635      	lsls	r5, r6, #24
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	d501      	bpl.n	800507a <_printf_i+0x1c6>
 8005076:	6019      	str	r1, [r3, #0]
 8005078:	e002      	b.n	8005080 <_printf_i+0x1cc>
 800507a:	0670      	lsls	r0, r6, #25
 800507c:	d5fb      	bpl.n	8005076 <_printf_i+0x1c2>
 800507e:	8019      	strh	r1, [r3, #0]
 8005080:	2300      	movs	r3, #0
 8005082:	4615      	mov	r5, r2
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	e7bc      	b.n	8005002 <_printf_i+0x14e>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	2100      	movs	r1, #0
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	602a      	str	r2, [r5, #0]
 8005090:	681d      	ldr	r5, [r3, #0]
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	4628      	mov	r0, r5
 8005096:	f000 f859 	bl	800514c <memchr>
 800509a:	b108      	cbz	r0, 80050a0 <_printf_i+0x1ec>
 800509c:	1b40      	subs	r0, r0, r5
 800509e:	6060      	str	r0, [r4, #4]
 80050a0:	6863      	ldr	r3, [r4, #4]
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	2300      	movs	r3, #0
 80050a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050aa:	e7aa      	b.n	8005002 <_printf_i+0x14e>
 80050ac:	462a      	mov	r2, r5
 80050ae:	4649      	mov	r1, r9
 80050b0:	4640      	mov	r0, r8
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	47d0      	blx	sl
 80050b6:	3001      	adds	r0, #1
 80050b8:	d0ad      	beq.n	8005016 <_printf_i+0x162>
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	079b      	lsls	r3, r3, #30
 80050be:	d413      	bmi.n	80050e8 <_printf_i+0x234>
 80050c0:	68e0      	ldr	r0, [r4, #12]
 80050c2:	9b03      	ldr	r3, [sp, #12]
 80050c4:	4298      	cmp	r0, r3
 80050c6:	bfb8      	it	lt
 80050c8:	4618      	movlt	r0, r3
 80050ca:	e7a6      	b.n	800501a <_printf_i+0x166>
 80050cc:	2301      	movs	r3, #1
 80050ce:	4632      	mov	r2, r6
 80050d0:	4649      	mov	r1, r9
 80050d2:	4640      	mov	r0, r8
 80050d4:	47d0      	blx	sl
 80050d6:	3001      	adds	r0, #1
 80050d8:	d09d      	beq.n	8005016 <_printf_i+0x162>
 80050da:	3501      	adds	r5, #1
 80050dc:	68e3      	ldr	r3, [r4, #12]
 80050de:	9903      	ldr	r1, [sp, #12]
 80050e0:	1a5b      	subs	r3, r3, r1
 80050e2:	42ab      	cmp	r3, r5
 80050e4:	dcf2      	bgt.n	80050cc <_printf_i+0x218>
 80050e6:	e7eb      	b.n	80050c0 <_printf_i+0x20c>
 80050e8:	2500      	movs	r5, #0
 80050ea:	f104 0619 	add.w	r6, r4, #25
 80050ee:	e7f5      	b.n	80050dc <_printf_i+0x228>
 80050f0:	0800539c 	.word	0x0800539c
 80050f4:	080053ad 	.word	0x080053ad

080050f8 <memmove>:
 80050f8:	4288      	cmp	r0, r1
 80050fa:	b510      	push	{r4, lr}
 80050fc:	eb01 0402 	add.w	r4, r1, r2
 8005100:	d902      	bls.n	8005108 <memmove+0x10>
 8005102:	4284      	cmp	r4, r0
 8005104:	4623      	mov	r3, r4
 8005106:	d807      	bhi.n	8005118 <memmove+0x20>
 8005108:	1e43      	subs	r3, r0, #1
 800510a:	42a1      	cmp	r1, r4
 800510c:	d008      	beq.n	8005120 <memmove+0x28>
 800510e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005116:	e7f8      	b.n	800510a <memmove+0x12>
 8005118:	4601      	mov	r1, r0
 800511a:	4402      	add	r2, r0
 800511c:	428a      	cmp	r2, r1
 800511e:	d100      	bne.n	8005122 <memmove+0x2a>
 8005120:	bd10      	pop	{r4, pc}
 8005122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800512a:	e7f7      	b.n	800511c <memmove+0x24>

0800512c <_sbrk_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	2300      	movs	r3, #0
 8005130:	4d05      	ldr	r5, [pc, #20]	; (8005148 <_sbrk_r+0x1c>)
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	602b      	str	r3, [r5, #0]
 8005138:	f7fc fd26 	bl	8001b88 <_sbrk>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_sbrk_r+0x1a>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_sbrk_r+0x1a>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	20000380 	.word	0x20000380

0800514c <memchr>:
 800514c:	4603      	mov	r3, r0
 800514e:	b510      	push	{r4, lr}
 8005150:	b2c9      	uxtb	r1, r1
 8005152:	4402      	add	r2, r0
 8005154:	4293      	cmp	r3, r2
 8005156:	4618      	mov	r0, r3
 8005158:	d101      	bne.n	800515e <memchr+0x12>
 800515a:	2000      	movs	r0, #0
 800515c:	e003      	b.n	8005166 <memchr+0x1a>
 800515e:	7804      	ldrb	r4, [r0, #0]
 8005160:	3301      	adds	r3, #1
 8005162:	428c      	cmp	r4, r1
 8005164:	d1f6      	bne.n	8005154 <memchr+0x8>
 8005166:	bd10      	pop	{r4, pc}

08005168 <memcpy>:
 8005168:	440a      	add	r2, r1
 800516a:	4291      	cmp	r1, r2
 800516c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005170:	d100      	bne.n	8005174 <memcpy+0xc>
 8005172:	4770      	bx	lr
 8005174:	b510      	push	{r4, lr}
 8005176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800517a:	4291      	cmp	r1, r2
 800517c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005180:	d1f9      	bne.n	8005176 <memcpy+0xe>
 8005182:	bd10      	pop	{r4, pc}

08005184 <_realloc_r>:
 8005184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005188:	4680      	mov	r8, r0
 800518a:	4614      	mov	r4, r2
 800518c:	460e      	mov	r6, r1
 800518e:	b921      	cbnz	r1, 800519a <_realloc_r+0x16>
 8005190:	4611      	mov	r1, r2
 8005192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	f7ff bc37 	b.w	8004a08 <_malloc_r>
 800519a:	b92a      	cbnz	r2, 80051a8 <_realloc_r+0x24>
 800519c:	f7ff fbcc 	bl	8004938 <_free_r>
 80051a0:	4625      	mov	r5, r4
 80051a2:	4628      	mov	r0, r5
 80051a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a8:	f000 f81b 	bl	80051e2 <_malloc_usable_size_r>
 80051ac:	4284      	cmp	r4, r0
 80051ae:	4607      	mov	r7, r0
 80051b0:	d802      	bhi.n	80051b8 <_realloc_r+0x34>
 80051b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051b6:	d812      	bhi.n	80051de <_realloc_r+0x5a>
 80051b8:	4621      	mov	r1, r4
 80051ba:	4640      	mov	r0, r8
 80051bc:	f7ff fc24 	bl	8004a08 <_malloc_r>
 80051c0:	4605      	mov	r5, r0
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d0ed      	beq.n	80051a2 <_realloc_r+0x1e>
 80051c6:	42bc      	cmp	r4, r7
 80051c8:	4622      	mov	r2, r4
 80051ca:	4631      	mov	r1, r6
 80051cc:	bf28      	it	cs
 80051ce:	463a      	movcs	r2, r7
 80051d0:	f7ff ffca 	bl	8005168 <memcpy>
 80051d4:	4631      	mov	r1, r6
 80051d6:	4640      	mov	r0, r8
 80051d8:	f7ff fbae 	bl	8004938 <_free_r>
 80051dc:	e7e1      	b.n	80051a2 <_realloc_r+0x1e>
 80051de:	4635      	mov	r5, r6
 80051e0:	e7df      	b.n	80051a2 <_realloc_r+0x1e>

080051e2 <_malloc_usable_size_r>:
 80051e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e6:	1f18      	subs	r0, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfbc      	itt	lt
 80051ec:	580b      	ldrlt	r3, [r1, r0]
 80051ee:	18c0      	addlt	r0, r0, r3
 80051f0:	4770      	bx	lr
	...

080051f4 <_init>:
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	bf00      	nop
 80051f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fa:	bc08      	pop	{r3}
 80051fc:	469e      	mov	lr, r3
 80051fe:	4770      	bx	lr

08005200 <_fini>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr
